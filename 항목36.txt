항목 36: 상속받은 비가상 함수를 파생 클래스에서 재정의하는 것은 절대 금물!

D라는 이름의 클래스가 B라는 이름의 클래스로부터 public 상속에 의해 파생되었고 B 클래스에는 mf라는 이름의 public 멤버 함수가 정의되어 있다고 가정합시다. 
mf의 매개 변수나 반환 타입은 중요한 사항이 아니기 때문에,그냥 둘 다 void라고 해 룹시다. 
그러 니까,다음과 같다는 말입니다. 

class B { 
	public: 
	void mf();
	...
}; 
class D : public B { ... }; 

B나 D, 혹은 mf에 대해 전혀 모르는 상태에서 D 타입의 객체인 x가 다음처럼 있다고 할 때, 

D x; 	// x는 D 타업으로 생성된 객체입니다. 

다음과 같이 작성한 코드개 

B *pB &x; 	// x에 대한 포인터들 얻어업니다. 
pB->mf(); 	// 이 포인터를 통해 mf를 호출합니다. 

다음처럼 동작하지 않으면 꽤나 황당할 것입니다 

D *pD = &x; 	// x에 대한 포인터를 얻어냄니다. 
pD->mf(); 	// 이 포인터를 통해 mf를 호출합니다. 

황당한 이유는 간단합니다. 
양쪽의 경우에서 한결같이 x 객체로부터 mf 멤버 함수를 호출 하고 있기 때문입니다 함수도 똑같고 객체도 똑같으니, 동작도 같아야 하는 게 맞잖아요 그렇죠? 
맞습니다. 이치적으로 그래야 하죠 그런데 디를 수도 있다는 게 문제입니다. 
특히, mf가 비 가상 함수이고 D 클래스가 자체적으로 mf 함수를 또 정의하고 있으면 위와 같은 황당한 동 작이 나오게 됩니다. 

class D: public B 
{
	public : 
	void mf(); 	// B::mf를 가려 버립니다. 항목 33 참조 
	...
};
pB->mf(); // B::mf를 호출합니다. 
pD->mf(); // D::mf를 호출합니다. 

이렇게 두 얼굴의 동작을 히는 이유는, B::mf 및 D::mf 등의 비가상 함수는 정적 바인딩 (static binding)으로 묶이기 때문입니다(항목 37 참조). 
무슨 뜻인고 하니,pB논 'B에 대한 포인터' 타업으로 선언되었기 때문에, pB를 통해 호출되는 비가상 함수는 항상 B 클래스에 정의되어 있을 것이라고 
결정해 버린다는 말입니다. 심지어 B에서 파생된 객체를 pB가 가 리키고 있다 해도 마찬가지입니다. 위의 예제에서 보신 바와 같지요.
반면, 가상 함수의 경우엔 동적 바인딩(dynamically binding)으로 묶입니다(역시 항목 37 참조). 비가상 함수와 같은 문제로 골머리를 썩을 이유가 
없죠 만약 mf 함수가 가상 함수였다면, mf가 pB에서 호출되든 pD에서 호출되든 D::mf가 호출됩니다. pB 및 pD가 진짜로 가리 키는 대상은 D 타입의 객체이니까요.

만약 여러분이 D 클래스를 (B로부터 파생시켜) 만드는 도중에 B 클래스로부터 물려받은 비가 상 함수인 mf를 재정의해 버리면, D 클래스는 일관성 없는 동작을 
보이는 이상한 클래스가 됩니다 특히, 분명히 D 객체인데도 이 객체에서 mf 함수를 호출하면 B 와 D중 어디로 튈지 모르는 갈지자 행보를 보인단 말씀입니다.  
게다가 B냐 D냐를 좌우하는 요인이 해당 객 체 자신이 아니라, 그 객체를 가리키는 포인터의 타입이란 점이 심각하게 암울합니다. 참조자는 좀 다를 것 같죠? 좌절스런 
문제를 일으키기는 포인터나 마찬가지입니다.

그러나 위의 이야기는 코드를 실제로 작성했을 때 이런 일이 생길 수 있다고 말씀드리는 것 뿐입니다. 상속받은 비가상 함수를 재정의하면 안 되는 이유에 대한 뭔가 
이론적인 배경 설 명을 잔뜩 기대하고 있다가 숨겨뒀던 연장을 묵묵히 꺼내시는 단군의 아들딸들의 뜨거운 분 노가 느껴집니다. 진정하세요 제가 나 몰라라 하겠습니까.

항목 32를 읽으신 분은 아시겠지만 public 상속의 의미는 "is-a( ...는 ....의 일종이다)"입니다. 그리고 항목 34에서 해드린 설명에 의하면 비가상 멤버 함수는 
클래스 파생에 관계없는 불 변동작을 정해 두는 거라고도 이야기했었죠. 이 두 가지 포인트를 B, D 클래스 및 비가상 멤버 함수인 B::mf에 그대로 가져가면, 이렇게 
풀 수 있습니다.

- B 객체에 해당되는 모든 것들이 D 객체에 그대로 적용됩니다. 왜냐하면 모든 D 객체는 B 객체의 일종이기 때문입니다.
- B에서 파생된 클래스는 mf 함수의 인터페이스와 구현을 모두 물려받게 됩니다. mf는 B 클래스에서 비가상 멤버 함수이기 때문입니다.

자, 이제 D에서 mf를 재정의한단 말이죠 그 순간 여러분 설계에는 모순이 생겨 버립니다. 만약 mf를 B와 다르게 구현한 것이 진짜로 원해서 그런 거였고, 그리고 B 및 B의 
파생 클래스로부터 만들어진 모든 객체가 (클래스 파생에 상관없이) B의 mf 구현을 사용해야 한다고 정한 것이 진짜라면, mf의 재정의로 인해 '모든 D는 B의 일종'이란 
명제는 에누리 없이 거 짓이 됩니다. 이런 상황이라면, D는 B로부터 public 상속을 받으면 안 됩니다. 한편, D는 B로부터 public 상속을 받아 파생시킬 수밖에 없는 
사정이 있고, 진짜로 D에서 mf 함수를 B의 그것과 다르게 구현해야 한다면, 'mf는 클래스 파생에 상관없이 B에 대한 불변동작 을 나타낸다'라는 점도 참이 되지 않습니다. 
이런 경우라면 mf는 가상 함수로 만들어지는 것이 맞습니다. 마지막으로, 만약 모든 D가 B의 일종이고 정말 mf가 클래스 파생에 상관없는 B의 불변동작에 해당한다면, D에서는 
결단코 mf를 재정의할 생각도 할 수 없습니다. 시도도 하지 말아야 합니다.

실제적이든 이론적이든, 받아들이는 입장에서는 문제일 수밖에 없겠죠? 그리고 어떤 상황에 서도 상속받은 비가장 함수를 재정의하는 것은 절대 금물입니다. 이번 항목을 
읽으시다가 어디서 비슷한 내용을 예전에 본 듯한 느낌이 드시는 분은 항목 7 을 이미 읽으신 기억력 좋은 분들입니다. 항목 7의 내용이 바로, 다형성을 부여한 기본 클래스의 
소멸지를 반드시 가상 함수로 만들어 두어야 하는 이유이거든요. 그런데 항목 7의 이야기대로 하지 않으면(그러니까, 다형성 기본 클래스에서 비가장 소멸자를 선언해 버리면), 
결국 이번 항목에서 제가 드린 당부도 듣지 않은 것이 됩니다. 파생 클래스에서는 상속받은 비가상 함수, 즉 비가상 소멸자를 재정의할 것이 뻔하기 때문입니다. 심지어 소멸자를 
선언하지 않은 경우에도 이런 불상사가 발생할 수 있습니다. 항목 5에서 이야기했듯이, 여러분이 직접 선언히지 않으면 컴파일러님께서 자동으로 만들어 주시는 멤버 함수 중 
하나가 바로 소멸자 란 말이죠. 따져 보면 항목 7의 내용은 사실 이번 항목의 특수한 한 경우리는 것을 알 수 있습니다. 물론 항목을 따로 둬야 할 정도로 중요한 내용이지만요.

이것만은 잊지 말자!
* 상속받는 비가상 함수를 재정의하는 일은 절대로 하지 맙시다.
