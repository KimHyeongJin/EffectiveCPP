항목 8: 예외가 소멸자를 떠나지 못하도록 붙들어 놓자

소멸자로부터 예외가 발생 한 경우 C++ 언어에서 해결해 주지는 않지만, 실제 상황을
들춰보면 확실히 우리가 해결할 수 밖에 없는 것 같습니다. 납득할 만한 명분도 있고요 아래의
예를 봅시다.

class Widget
{
public:
	...
	~Widget(){...}	// 이 함수로 부터 예외가 발생된다고 가정합니다.
};

void doSomething()
{
	std::vector<Widget> v;
	...
}		// v는 여기서 자동으로 소멸됩니다.

vector 타입의 객체 v, 다시 말해 벡터 v가 소멸될 때, 자신이 담고 있는 Widget
들 전부를 소멸시킬 책임은 바로 이 벡터에게 있겠지요. v에 들어 있는 Widget이 10개인
데, 첫 번째 것을 소멸시키는 도중에 예외가 발생되었다고 가정합시다. 나머지 9개는 여
전히 소멸되어야 하므로(그렇지 않으면 Widget이 가지고 있을지 모를 자원이 누출됩니디), 
v는 이들에 대해 소멸자를 호출해야 할 것입니다. 그런데 이 과정에서 문제가 또 터졌다고 
가정합시다. 두 번째 Widget의 소멸자에서 예외가 던져지면 어떻게 될까요? 현재
활성화된 예외가 동시에 두 개나 만들어진 상태이고, C++의 입장에서는 감당하기에 버겁습
니다. 이 두 예외가 동시에 발생한 조건이 어떤 미묘한 조건이냐에 따라 프로그램 실행이
종료되든지 아니면 정의되지 않은 동작을 보이게 될 텐데, 이 경우에는 프로그램 실행이 정의되
지 않은 동작을 보입니다. 다른 표준 라이브러리 컨테이너(이를테면 list나 set) 라든지
TR1(항목 54 참조)의 컨테이너를 쓰더라도 결과는 마찬가지이며, 심지어 배열을 써도 마찬가
지입니다. 그런데 컨테이너나 배열을 썼기 때문에 이런 말썽이 생긴 것이 이닙니다. 완전하
지 못한 프로그램 종료나 미정의 동작의 원인은 바로 예외가 터져 나오는 것을 내버려 두
는 소멸자에게 있습니다. 심지어 컨테이너나 배열을 쓰지 않아도 말이죠. C++는 예외를 내
보내는 소멸자를 좋아하지 않는단 말입니다!

방금 이야기만 이해하고 말 문제라면 이것으로도 쉽게 끝이겠지만 예외를 던지고 실패할 수
있는 코드를 소멸자에 넣어야 할 사람이 혹시 여러분이라면 어떻게 히시겠어요? 이해가 안 된
고요? 그럼, 여러분이 데이터베이스 연결을 나타내는 클래스를 쓰고 있다고 가정하고 이야
를 계속하겠습니다.

class DBConnection
{
public:
	...
	static DBConnection create();	// DBConnection 객체를 반환하는 함수,
									// 매개변수는 편의상 생략
	void close();					// 연결을 닫습니다. 이때 연결이 실패하면
									// 예외를 던집니다.
};

보다시피 사용자가 DBConnection 객체에 대해 close를 직접 호출해야 하는 설계입니
다. 사용자의 망각을 사전에 차단하는 좋은 방법이라면 DBConnection에 대한 자원 관리
클래스를 만들어서 그 클래스의 소멸자에서 close를 호출하게 만드는 것이겠지요. 이런 자
원 관리 클래스는 3장에서 충분히 다루고 있지만, 여기서는 일단 자원 관리 클래스의 소멸
자가 어떤 형태인지만 살펴보겠습니다. 아래를 보시죠.class DBConn		// DBConnection 객체를 관리하는 클래스{public:	...	~DBConn()		// 데이터베이스 연결이 항상 닫히도록 확실히 챙겨주는 함수	{		db.close();	}private:	DBConnection db;};여러 분의 감동스런 배려 덕택에 다음과 같은 프로그래멍이 가능해집니다.{	// 블록 시작	DBConn dbc(DBConnection::create());	// DBConnection 객체를 생성하고										// 이것을 DBConn 객체로 넘겨서 관리										// 를 맡깁니다.	...	// DBConn 인터페이스를 통해 그 DBConnection 객체를 사용합니다.}		// 블록 끝, DBConn 객체가 여기서 소멸됩니다. 따라서 DBConnection 객체에		// 대한 close 함수의 호출이 자동으로 이루어집니다.close 호출만 일사천리로 성공하면 아무 문제될 것이 없는 코드입니다. 그러나 close를
호출했는데 여기서 예외가 발생했다고 가정하면 어떻게 될까요? DBConn의 소멸자는 분명
히 이 예외를 전파할 것입니다. 쉽게 말해 그 소멸자에서 예외가 나가도록 내버려 둔다는
거죠. 바로 이것이 문제입니다. 예외를 던지는 소멸자는 곧 '걱정거리'를 의미하기 때문입니다.

걱정거리를 피하는 방법은 두 가지입니다. DBConn의 소멸자는 이 둘 중 하나를 선택할 수
있고요.

* close에서 예외가 발생하면 프로그램을 바로 끝냅니다. 대개 abort를 호출합니다.
DBConn::~DBConn()
{
	try{db.close();}
	catch(...)
	{
		...	//close 호출이 실패하는 로그를 작성합니다.
		std::abort();
	}
}

객체 소멸이 진행되다가 에러가 발생한 후에 프로그램 실행을 계속할 수 없는 상황이라면
꽤 괜찮은 선택입니다. 소멸자에서 생긴 예외를 그대로 흘려 내보냈다가 정의되지 않은
동작에까지 이를 수 있다면, 그런 불상사를 막는다는 의미에서 어느 정도 장점도 있습니
다. 간단히 말해, abort를 호출해서 못 볼꼴을 미리 안 보여 주겠다는 의도죠.

* close를 호출한 곳에서 일어난 예외를 삼켜 버립니다.
DBConn::~DBConn()
{
	try{db.close();}
	catch(...)
	{
		...	//close 호출이 실패하는 로그를 작성합니다.
	}
}

대부분의 경우에서 예외 삼키기는 것은 그리 좋은 발상이 아닙니다. 무엇이 잘못됬는지를 
알려 주는 중요한 정보가 묻혀 버리기 때문입니다.  하지만 때에 따라서는 불완전한
프로그램 종료 혹은 미정의 동작으로 인해 입는 위험을 감수하는 것보다 그냥 예외를 먹어
버리는 게 나을 수도 있습니다. 단, '예외 삼키기'를 선택한 것이 제대로 빛을 보려면, 발생
한 예외를 그냥 무시한 뒤라도 프로그램이 신뢰성 있게 실행을 지속할 수 있어야 합니다.