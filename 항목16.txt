항목 16: new 및 delete를 사용할 때는 형태를 반드시 맞추자

아래에 적어 놓은 것에서 뭔가 잘못된 점이 보이나요?

std::string* stringArray = new std::string[100];
...
delete stringArray;

하늘을 우러러 한 점 부끄럼 없을 코드 같습니다. 가장 신경 쓰이는 new와 delete가 짝
이 맞아 있지요. 하지만 분명히 부끄럼이 한 점, 그것도 대박으로 있으니 이를 어쩌죠? 실제
로 코드가 위와 같이 되어 있으면 그 프로그램은 미정의 동작을 보이게 됩니다. 정말정말
잘 봐주었다고 가정할 때, stringArray가 가리키는 100의 string 객체들 가운데 99
는 정상적인 소멸 과정을 거치지 못할 가능성이 큽니다. 그도 그럴 것이, 위의 코드로는
소멸자가 99번 불릴 턱이 없기 때문입니다.

여러분이 new 연산자를 사용해서 표현식을 꾸미게 되면(즉, new로 어떤 객체를 동적 할당하
면), 이로 인해 두 가지의 내부 동작이 진행됩니다. 일단 메모리가 할당됩니다(이때 operator
new라는 이름의 함수가 쓰입니다. 항목 49 및 51 참조). 그 다음, 할당된 메모리에 대해 한 개
상의 생성자가 호출됩니다. delete 표현식을 쓸 경우에는(즉, delete 연산자를 사용할 때
는) 또 다른 두 가지의 내부 동작이 진행되는데, 우선 기존에 할당된 메모리에 대해 한 개
이상의 소멸자가 호출되고, 그 후에 그 메모리가 해제됩니다(이때 operator delete라는
이름의 함수가 쓰입니다. 항목 51 참조). 자, 여기서 질문 하하! delete 연산자가 적용되는
객체는 대체 몇 개나 될까요? 바로 이 질문의 답이 '소멸자가 호출되는 횟수'가 됩나다.

질문이 좀 복잡한 듯하니 우리 식대로 편하게 다시 풀어 보죠. 삭제되는 포인터는 객체 하
나만 가리킬까요. 아니면 객체의 배열을 가리킬까요? 이것이 진짜 핵심인데, 왜냐하면 (new
로 힙에 만들어진) 단일 객체의 메모리 배치구조(layout)는 객체 배열에 대한 메모리 배치구조
와 다르기 때문입니다 특히, 배열을 위해 만들어지는 힙 메모리에는 대개 배열원소의 개수
가 박혀 들어간다는 점이 가장 결정적인데, 이 때문에 delete 연산자는 소멸자가 몇 번
호출될지를 쉽게 알 수 있답니다. 반면, 단일 객체용 힙 메모리는 이런 정보가 없습니다. '배
치구조가 다르다'라는 말뜻은 다음과 같이 생각하시면 될 거에요. 여기서 n은 배열의 크기
(원소의 개수)입니다.

한 개의 객체		[Object]

객체의 배열		[n][Object][Object][Object][...

위의 그림은 그냥 예제입니다. 컴파일러마다 꼭 저런 식으로 구현할 필요는 없습니다.

어떤 포인터에 대해 delete를 적용할 때, delete 연산자로 하여금 '배열 크기 정보가
있다'는 것을 알려 줄 칼자루는 바로 여러분이 쥐고 있습니다. 여러분이 입을 다물면 아무도
모르는 거죠 이때 대괄호 쌍([])을 delete 뒤에 붙여 주는 것입니다. 그제야 delete가
'포인터가 배열을 가리키고 있구나'라고 가정하게 됩니다. 그렇지 않으면 그냥 단일 객체라
고 간주하고 맙니다.

std::string* stringPtr1 = new std::string;
std::string* stringPtr2 = new std::string[100];
...
delete stringPtr1;		// 객체 한 개를 삭제합니다.
delete[] stringPtr2;	// 객체의 배열을 삭제합니다.

stringPtr1에 '[]' 형태를 사용하면 어떤 일이 생길까요? 딱 정해진 것은 아니지만, 결과
가 별로 이름답지 않을 것 같긴 합니다. 메모리 배치구조가 위와 같이 되어 있다고 가정할
때, 우선 delete는 앞쪽의 메모리 몇 바이트를 읽고 이것을 배열 크기라고 해석합니다.
이윽고 배열 크기에 해당하는 횟수만큼 소멸자를 하기 시작할 테지요. 그러다 결국 자
신이 밟고 있는 메모리가 배열에 속해 있지도 않다는 사실은 물론, 그 메모리에는 자신이
소멸시키려는 타입의 객체가 이미 들어 있지 않다는 명백하고 우울한 사실에 도달할 겁니다.

그렇다면 stringPtr2에 '[]' 형태를 사용하지 않으면 어떤 일이 생길까요? 흠, 역시 정의
된 바는 없으나 여러분이 겪게 될 사태의 원인이 '소멸자 호출 횟수가 너무 적어서'라는 점
은 분명합니다. 심지어 int 등의 기본제공 타입이라 해도 이들의 배열에 대해 []을 쓰지
않으면 미정의 동작이 나타납니다. 소멸자도 없는 주제에 말입니다.

어려울 것 하나도 없습니다. new 표현식에 []를 썼으면, 여기에 대응되는 delete 표현식
에도 []를 써야 한다는 아주 간단한 규칙입니다. new 표현식에 []을 안 썼으면, 대응되는
delete 표현식 에도 []을 안 쓰면 됩니다.

동적 할당된 메모리에 대한 포인터를 멤버 데이터로 갖고 있는 클래스를 만드는 중이며 이
클래스에서 제공하는 생성자도 여러 개일 경우에 특히 이 규칙을 뺏속 깊이 간직하시기 바
랍니다. 왜냐하면 포인터 멤버를 초기화하는 부분인 생성자에서 new 형태를 똑같이 맞출 수
밖에 없기 때문입니다. 이렇게 하지 않는다면, 소멸자에서 어떤 형태의 delete를 써야 할
지를 어떻게 알겠습니까?

이 규칙은 typedef 애호가들도 알아둘 가치가 있습니다. typedef로 정의된 어떤 타입
의 객체(배열)를 메모리에 생성하려고 new를 썼을 때 나중에 어떤 형태의 delete를 적어
줘야 하는가에 대한 언급을 달아 주는 책임을 해당 typedef 타입의 작성자가 져야 한다
고 압박을 가하는 의미로 볼 수 있으니까요. 예를 들어, 어떤 typedef 타입이 다음과 같
이 되어 있다고 가정합시다.