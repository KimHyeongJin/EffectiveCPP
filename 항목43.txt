항목 43: 템플릿으로 만들어진 기본 클래스 안의 이름에 접근하는 방법을 알아 두자

정확한 이유는 알 수 없지만 어쨌든 여러분은 지금, 다른 몇 개의 회사에 메시지를 전송할 수 있는 응용프로그램을 
만들어내야 하나 봅니다. 전송용 메시지는 암호화될 수도 있고 비가공텍스트(비암호회) 형태가 될 수도 있습니다. 
만약 어떤 메시지가 어떤 회사로 전송될지를 컴파일 도중에 결정할 수 있는 충분한 정보가 있다면, 주저 없이 템플
릿 기반의 방법을 쓸 수 있겠지요. 다음처럼 말이죠.

class CompanyA
{
public:
	...
	void sendCleartext(const std::string& msg); 
	void sendEncrypted(const std::string& msg);
	...
};

class CompanyB
{ 
public :
	...
	void sendCleartext(const std::string& msg); 
	void sendEncrypted(const std::string& msg);
	...
};

...							// 다른 회사들을 나타내는 각각의 클래스 

class MsgInfo { ... };		// 메시지 생성에 사용되는 정보를 담기 위한 클래스

template<typename Company>
class MsgSender 
{ 
public : 
	...									// 생성자, 소멸자, 등등
	void sendClear(const MsgInfo& info)
	{
		std::string msg; 
		//	info로부터 msg를 만듭니다;

		Company c; 
		c.sendCleartext(msg); 
	}
	void sendSecret(const MsgInfo& info) // sendClear 함수와 비슷합니다. 단, 
	{ ... }								// c.sendEnCrypted 힘수를 호출하는 점이 차이
};

여기까지만 하면 일단 잘 돌아갈 것입니다. 그런데 이에 덧붙여서 메시지를 보낼 때마다 관련 정보를 로그로 
남기고 싶은 분들도 계시겠지요. 파생 클래스를 사용하면 이 기능을 쉽게 붙일 수 있고, 그렇게 해 주는게 
맞을 것 같습니다.

template<typename Company>
class LoggingMsgSender: public MsgSender<Company> 
{ 
public:
	...										// 생성자, 소멸자, 등등 
	void sendClearMsg( const MsgInfo& info )
	{
		//	"메시지 전송 전" 정보를 로그에 기록합니다; 
		sendClear(info);						// 기본 클래스의 함수를 호출하는데, 이 코드는 컴파일되지 않습니다. 
		//	"메시지 전송 후" 정보를 로그에 기록합니다;
	}
	...
};

조금만 신경 써서 코드를 보면 파생 클래스에 있는 메시지 전송 함수의 이름(sendClearMsg)이 기본 클래스에 있는 것(sendClear)
과 다르다는 점이 눈에 될 것입니다. 꼼꼼하게 잘 된 설계입니다. 기본 클래스로부터 물려받은 이름을 파생 클래스에서 가리는 문제
(항목 33 참조)는 물론이고 상속받은 비가상 함수를 재정의히는 문제(항목 36 참조)를 일으키지 않도록 한 것이기 때문입니다. 그것
까진 '참 잘했어요'이지만 이 코드는 컴파일되지 않습니다. 적어도 표준을 따르는 컴파일러를 쓴다면 컴파일이 안 될 것입니다. 

* 'sendClear 함수가 존재하지 않는다'라는 것이 컴파일이 안되는 이유입니다.

우리 눈에는 기본 클래스에 들어있는 sendClear 함수가 버젓이 보이는데도, 컴파일러는 기본 클래스를 들여다보려고 하지도 않는 것
입니다. 어째서일까요?

* 문제는 간단합니다. 컴파일러가 LoggingMsgSender 클래스 템플릿의 정의와 마주칠 때, 컴파일러는 대체 이 클래스가 어디서 파생된 
것인지를 모른다는 것입니다. MsgSender<Company>인 것은 분명 맞죠. 하지만 Company는 템플릿 매개변수이고, 이 템플릿 매개 변수
는 나중(LoggingMsgSender가 인스턴스로 만들어질 때)까지 무엇이 될지 알 수 없습니다. Company가 정확히 무엇인지 모르는 상황
에서는 MsgSender<Company> 클래스가 어떤 형태인지 알 방법이 있을리가 없겠죠? 이러니, sendClear 함수가 들어 있는지 없는지
알아낼 방법이 없는 것도 당연합니다.

문제를 구체적으로 알고 싶으신 분들을 위해, 가정을 하나 더 합시다. CompanyZ라는 클래스가 있고, 이 클래스는 암호화된 통신만을 사
용해야 합니다.

class CompanyZ		// 이 클래스는 sendCleartext 함수를 제공하지 않습니다.
{ 
public :
	...
	void sendEncrypted(const std::string& msg);
	...
};

조금 전에 보신 일반형 MsgSender 템플릿은 그대로 CompanyZ 클래스에 쓰기엔 좀 그렇습니다. 이 템플릿은 CompanyZ 객체의 설계 철학
과 맞지 않는 sendClear 함수를 제공하기 때문입니다. 이 부분을 바로 잡기 위해, CompanyZ를 위한 MsgSender의 특수화 버전을 만들
수 있습니다.

template<>								// MsgSender 템플릿의 완전 특수화 버전입니다. sendClear 함수가 빠진것만 제외
class MsgSender<CompanyZ>				// 하면 일반형 템플릿과 똑같습니다.
{ 
public : 
	...
	void sendSecret(const MsgInfo& info)
	{ ... }
};

여기서 클래스 정의의 앞머리에 삐죽 나와 있는 "template<>" 구문을 잘 봐 주세요. 괄호 안에 아무것도 없는 template의 뜻은 '이건 
템플릿도 아니고 클래스도 아니다'라는 것입니다. 정확히 말하면, 위의 코드는 MsgSender 템플릿을 템플릿 매개변수가 CompanyZ 일때 쓸
수 있도록 특수화한 버전입니다. 특히 지금 여러분이 보시는 특수화는 완전 템플릿 특수화(total template specialization)라고 합니
다. MsgSender 템플릿이 CompanyZ 타입에 대해 특수화되었고, 이때 이 템플릿의 매개변수들이 하나도 빠짐없이(완전히) 구체적인 타입
으로 정해진 상태라는 뜻이죠 그러니까, 일단 타입 매개변수가 CompanyZ로 정의된 이상 이 템플릿(특수화된)의 매개변수로는 다른 것이 
올 수 없게 된다는 이야기입니다.

이제 MsgSender 템플릿이 CompanyZ에 대해 특수화된 상태라고 가정하고, 앞에 나왔던 파생 클래스인 LoggingMsgSender로 다시 돌아와 
보죠.

template<typename Company>
class LoggingMsgSender: public MsgSender<Company> 
{ 
public:
	...
	void sendClearMsg( const MsgInfo& info )
	{
		// "메시지 전송 전" 정보를 로그에 기록합니다; 
		sendClear(info);						// 만약 Company == CompanyZ 라면 이 함수는 있을 수 조차 없습니다!
		// "메시지 전송 후" 정보를 로그에 기록합니다;
	}
	...
};

주석문에도 나와 있듯이, 기본 클래스가 MsgSender<CompanyZ>이면 이 코드는 말이 되지 않습니다. MsgSender<CompanyZ> 클래스에는 
sendClear 함수가 없으니까요. 바로 이런 일이 생길 수 있기 때문에 위와 같은 함수 호출을 C++가 받아주지 않는 것입니다. 기본 클래스 
템플릿은 언제라도 특수화될 수 있고 이런 특수화 버전에서 제공하는 인터페이스가 원래의 일반형 템플릿과 꼭 같으리란 법은 없다는 점을 
C++가 인식한다는 이야기죠. 이렇기 때문에, C++ 컴파일러는 템플릿으로 만들어진 기본 클래스를 뒤져서 상속된 이름을 찾는 것을 거부합니다. 
어떤 의미로 보면, C++의 하위 언어들 중 한 부분인 객체 지향 C++에서 템플릿 C++(항목 1 참조)로 옮겨 갈 때 상속 메커니즘이 끊기는 
것입니다.

난국 돌파를 위해서는 어떻게든 C++의 "난 템플릿화된 기본 클래스는 멋대로 안 뒤질 거야" 동작이 발현되지 않도록 해야 합니다. 방법이 
세 가지나 있습니다. 

첫째, 기본 클래스 함수에 대한 호출문 앞에  "this->"를 붙입니다.

template<typename Company>
class LoggingMsgSender: public MsgSender<Company> 
{ 
public:
	...
	void sendClearMsg( const MsgInfo& info )
	{
		// "메시지 전송 전" 정보를 로그에 기록합니다; 
		this->sendClear(info);						// 종습니다. sendClear가 상속되는 것으로 가정합니다.
		// "메시지 전송 후" 정보를 로그에 기록합니다;
	}
	...
};

둘째, using 선언을 사용합니다. 아마 항목 33을 읽으셨다면 '앗 이거?!' 하실지도 모르겠네요. 항목 33에는 가려진 기본 클래스의 이름을 
파생 클래스의 유효범위에 끌어오는 용도로 using 선언을 이용하는 방법이 나왔었죠. 어쨌든 sendClearMsg 함수는 다음과 같이 작성할 수
있습니다. 

template<typename Company>
class LoggingMsgSender : public MsgSender<Company> 
{ 
public: 
	using MsgSender<Company>::sendClear;	// 컴파일러에게 sendClear 함수가 기본 클래스에 있다고 가정하라고 알려 줍니다.
	...
	void sendClearMsg(const MsgInfo& info)
	{
		...
		sendClear(info);		// 좋습니다. sendClear가 상속되는 것으로 가정합니다. 
		...
	}
	...
};

[지금 경우와 항목 33에서 using 선언으로 해결한 것 자체는 똑같지만, 해결한 문제는 다릅니다. 이번 항목의 문제는 기본 클래스의 이름이
파생 클래스에서 가려지는 것이 아니라, 기본 클래스(템플릿화된)의 유효범위를 뒤지라고 우리가 컴파일러에게 알려 주지 않으면 컴파일러가 
알아서 찾는 일이 없다는 것입니다]

예제 코드가 컴파일되도록 만드는 마지막 방법은, 호출할 함수가 기본 클래스의 함수라는 점을 명시적으로 지정하는 것입니다.

template<typename Company>
class LoggingMsgSender : public MsgSender<Company> 
{ 
public: 
	...
	void sendClearMsg(const MsgInfo& info)
	{
		...
		MsgSender<Company>::sendClear(info);		// 좋습니다. sendClear가 상속되는 것으로 가정합니다. 
		...
	}
	...
};

이 마지막 방법은 문제 해결에 있어서 그리 추천하고 싶진 않습니다. 호출되는 함수가 가상 함수인 경우에는, 이런 식으로 명시적 한정을 
해버리면 가상 함수 바인딩이 무시되기 때문 입니다.

이름에 대한 가시성을 조작한다는 면에서 보면 말씀드린 세 가지 방법은 모두 동작 원리가 같습니다. 기본 클래스 템플릿이 이후에 어떻
게 특수화되더라도 원래의 일반형 템플릿에서 제공하는 인터페이스를 그대로 제공할 것이라고 컴파일러에게 약속을 하는 것입니다. 이런 
약속은 LoggingMsgSender 등의 파생 클래스 템플릿을 컴파일러가 구문분석하는 데 반드시 필요하지만, 그 약속이 비리정치인 선거공약 
같은 것이었다는 것이 들통 나면 이후의 컴파일 과정에서 겨레의 응징이 들어갑니다. 예를 들어, 이후의 소스 코드가 다음과 같이 되어 
있으면 

LoggingMsgSender<CompanyZ> zMsgSender; 
MsgInfo msgData;
...							// msgData에 정보를 채움니다.
zMsgSender.sendClearMsg(msgData);	// 에러! 컴파일되지 않습니다.

sendClearMsg 호출문은 컴파일이 되지 않습니다. 지금 이 부분에서는 기본 클래스가 MsgSender<CompanyZ>(템플릿 특수화 버전)라는 
사실을 컴파일러가 알고 있는데다가 sendClearMsg 함수가 호출하려고 하는 sendClear 함수는 MsgSender<CompanyZ> 클래스에 안 
들어 있다는 사실도 컴파일러가 알아챈 후이기 때문입니다.

본질적인 논점을 추려 볼까요? 기본 클래스의 멤버에 대한 참조가 무효한지를 컴파일러가 진단하는 과정이 미리(파생 클래스 템플릿의 
정의가 구문분석될 때) 들어가느냐, 아니면 나중에 (파생 클래스 템플릿이 특정한 템플릿 매개변수를 받아 인스턴스화될 때) 들어가느냐
가 바로 이번 항목의 핵심입니다. 여기서 C++는 이른바 '이른 진단(early diagnose)'을 선호하는 정책으로 결정한 것이죠. 파생 클래
스가 템플릿으로부터 인스턴스화될 때 컴파일러가 기본 클래스의 내용에 대해 아무것도 모르는 것으로 가정하는 이유도 이제 이해하실 수
있을 거예요.

이것만은 잊지 말자!
* 파생 클래스 템플릿에서 기본 클래스 템플릿의 이름을 참조할 때는 "this->"를 접두사로 붙이거나 기본 클래스 한정문을 명시적으로
써 주는 것으로 해결합시다.