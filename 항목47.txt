항목 47: 타입에 대한 정보가 필요하다면 특성정보 클쾌스를 사용하자

STL은 기본적으로 컨테이너(container) 및 반복자(iterator), 알고리즘(algorithm)의 템플릿으로
구성되어 있지만, 이 외에 유틸리티(utility)라고 불리는 템플릿도 몇 개 들어 있습니다. 이들중 
하나가 advance 라는 이름의 템플릿인데, 이 템플릿이 하는 일은 지정된 반복자를 지정된 거리(dist
-anc)리만큼 이동시키는 것입니다.

template<typename IterT, typename DistT>	// iter 를 d 단위만큼
void advance (IterT& iter, DistT d);		// 전진시킵니다. d < 0 이면
											// iter 를 후진시컵니다.

간단히 개념만 놓고 볼 때 advance는 그냥 iter += 만 하면 될 것 같지만, 사실 이렇
게 구현할 수는 없습니다. += 연산을 지원하는 반복자는 임의 접근 반복자밖에 없기 때문
이죠. 임의 접근 반복자보다 기능적으로 떨어지는 다른 반복자 타입의 경우에는 ++ 혹은
-- 연산을 d번 적용하는 것으로 advance를 구현해야 합니다.

흠, 어디선가 날아온 수면뇌파가 여러분 눈꺼풀을 냅다 누르지 않습니까? 혹시 STL 반복자
에 여러 종류가 있다는 사실을 수면제 캡슐 먹듯 까 드신 건 아닌가요? 진작에 말씀하시지
그랬어요. 말이 나왔으니 간단히 정리해 봅시다 STL 반복자는 각 반복자가 지원하는 연산
에 따라 다섯 개의 범주로 나뉩니다. 입력 반복자(input iterator)는 전진만 가능하고, 
한 번에 한 칸씩만 이동하며, 자신이 가리키는 위치에서 읽기만 가능한데다가, 그것도 읽을 
수 있는 횟수가 한 번뿐입니다. 이 입력 반복자는 입력 파일에 대한 읽기 전용 파일 포인터를 
본떠서 만들었고 C++ 표준 라이브러리의 istream iterator가 대표적인 입력 반복자입니다. 
출력 반복자(output iterator)는 입력 반복자와 비슷하지만 출력용인 점만 다릅니다. 즉,
오직 앞으로만 가고, 한 번에 한 칸씩만 이동하며, 자신이 가리키는 위치에서 쓰기만 가능한
데다가 쓸 수 있는 횟수가 딱 한 번뿐입니다. 이 출력 반복자는 출력 파일에 대한 쓰기 전
용 파일 포인터를 본떠서 만들었고 stream_iterator가 이 부류의 대표주자입니다.
입력 반복자와 출력 반복자는 STL의 5대 반복자 범주 가운데 기능적으로 가장 처집니다.
앞으로만 갈 수 있고 자신이 가리키는 위치에서 딱 한 번만 읽거나 쓸 수 있기 때문에, 단
일 패스(one-pass) 알고리즘에만 제대로 쓸 수 있습니다.

이것들보다 기능이 조금 강력한 반복자 범주가 순방향 반복자(forward iterator) 입니다. 
순방향 반복자는 입력 반복자와 출력 반복자가 하는 일은 기본적으로 다 할 수 있고, 여기에 
덧붙여 자신이 가리키고 있는 위치에서 읽기와 쓰기를 동시에 할 수 있으며, 그것도 여러 번
이 가능합니다. 따라서 이 반복자에 속하는 녀석들은 다중 패스(multi-pass) 알고리즘에 문제
없이 쓸 수 있습니다. STL은 원칙적으로 단일 연결 리스트를 제공하지 않지만 몇몇 라이브
러리를 보면 제공하는 것들이 있는데(대개 이름이 slist입니다), 이 컨테이너에 쓰는 반복자
가 바로 순방향 반복자입니다. TR1의 해시 컨테이너(항목 54 참조)를 가리키는 반복자도 아
마 순방향 반복자의 범주에 들어갈 것입니다.

앙방향 반복자(bidirectional iterator)는 순방향 반복자에 뒤로 갈 수 있는 기능을 추가한 
것입니다. STL의 list에 쓰는 반복자가 바로 이 범주에 들어갑니다. set, multiset,
map, multimap 등의 컨테이너에도 양방향 반복자를 씁니다.

다섯 개 반복자 범주 중 가장 센 녀석은 임의 접근 반복자(random access iterator)입니다.
양방향 반복자에 "반복자 산술 연산(iterator arithmetic)" 수행 기능을 추가한 것이죠. 
쉽게말해 주어진 반복자를 임의의 거리만큼 앞뒤로 이동시키는 일을 상수 시간 안에 할 수 있다
는 것입니다. 이러한 산술 연산은 포인터 산술 연산과 비슷합니다. 사실 놀랄 만한 거리로
보기도 힘든 것이, 기본제공 포인터를 본떠서 임의 접근 복자를 만들었기 때문입니다. 기
본제공 포인터는 임의 접근 복자의 기능을 그대로 지니고 있죠. C++ 표준 라이브러리의
vector, deque, string에 사용하는 반복자는 임의 접근 반복자입니다.

C++ 표준 라이브러리에는 지금까지 말씀드린 다섯 개의 반복자 범주 각각을 식별하는 데
는 "태그(tag) 구조체"가 정의되어 있습니다.

struct input_iterator_tag {};
struct output_iterator_tag {};
struct forward_iterator_tag: public input_iterator_tag {};
struct bidirectional_iterator_tag: public forward_iterator_tag {};
struct random_access_iterator_tag: public bidirectional_iterator_tag {};

구조체들 사이의 상속 관계를 보면 is-a 관계인 것을 알 수 있는데, 딱 적합한 의미입니다.
이를테면 모든 순방향 반복자는 입력 반복자도 되니까요. 이렇게 만들어진 public 상속을
어디에 쓰는지는 잠시 후에 확인하도록 하죠.

이제 advance로 돌아옵시다. 이렇듯 반복자들이 종류마다 가능한 것이 있고 불가능한 것
이 있다는 점을 안 이상, 구현할 때 조금 신경을 써야 할 것 같습니다, 한 가지 방법이라면
소위 최소 공통 분모(lowest-common-denominator) 전략을 들 수 있겠습니다. 반복자를 주어
진 횟수만큼 반복적으로 (한 칸씩) 증가시키거나 감소시키는 루프를 돌리는 것이죠. 하지만
이 방법을 쓰면 선형 시간이 걸린다는 것은 쉽게 측할 수 있습니다. 상수 시간의 반복자
산술 연산을 쓸 수 있는 임의 접근 반복자 입장에서는 분명 손해입니다. 그래서 임의 접근
반복자가 주어졌을 때는 상수 시간 연산을 이용할 수 있는 방법이 있었으면 좋겠습니다.

그러니까, 우리가 진짜로 하고 싶은 일은 advance 를 다음과 이 구현하는 거란 말이죠.

template<typename IterT, typename DistT>
void advace(IterT& iter, DistT d)
{
	if(iter가 임의 접근 반복자이다)
	{
		iter += d;	// 임의 접근 반복자에 대해서는 반복자 산술 연산을 씁니다.
	}
	else
	{
		if(d>0){while(d--) ++iter;}	// 다른 종류의 반복자에 대해서는 ++ 혹은
		else {while(d++) --iter;}	// -- 연산의 반복 호출을 사용합니다.
	}
}

아시겠지만, 위의 코드가 제대로 되려면 iter 부분이 임의 접근 반복자인지를 판단할 수
는 수단이 있어야 합니다. 그러니까, 이 iter의 타입인 IterT가 임의 접근 반복자 타
입인지를 알아야 한다는 거죠. 무슨 말인고 하니, 어떤 타입에 대한 정보를 얻어낼 필요가
있다, 이 말씀입니다. "그럼 어떻게 해야 한단 말예요?"라며 울상을 짓는 여러분을 구원해
는 존재가 바로 특성정보(traits) 입니다. 

*특성정보란, 컴파일 도중에 어떤 주어진 타입의 정보를 얻을 수 있게 하는 객체를 지칭하는 
개념입니다.

특성정보는 C++ 에 미리 정의된 문법구조가 아니며, 키워드도 아닙니다. 그냥 C++ 프로그
래머들이 따르는 구현 기법이며, 관례입니다. 특성정보가 되려면 몇 가지 요구사항이 지켜져
야 하는데, 특성정보는 기본제공 타입과 사용자 정의 타입에서 모두 돌아가야 한다는 점이
그 중 하나입니다. 이를테면 advance는 포인터(const char* 등) 및 int를 받아서 호출
될 때도 제대로 동작할 수 있어야 합니다. 하지만 이것의 정확한 의미는 '특성정보 기법을
포인터 등의 기본제공 타입에 적용할 수 있어야 한다'라는 것입니다.

'특성정보는 기본제공 타입에 대해서 쓸 수 있어야 한다'라는 사실을 뒤집어 생각하면, 어떤
타입 내에 중첩된 정보 등으로는 구현이 안 된다는 말로도 풀이할 수 있습니다. 포인터만
봐도 포인터 안에 정보를 넣을 방법이 없으니까요. 결국, 어떤 타입의 특성정보는 그 타입
의 외부에 존재하는 것이어야 하겠습니다. 특성정보를 다루는 표준적인 방법은 해당 특성정보
를 템플릿 및 그 템플릿의 1개 이상의 특수화 버전에 넣는 것입니다. 반복자의 경우, 표준
라이브러리의 특성정보용 템플릿이 iterator_traits 라는 이름로 준비되어 있습니다.

template<typename IterT>	// 반복자 타입에 대한
struct iterator_traits;		// 정보를 나타내는 플릿 

보다시피 iterator_traits는 구조체(어차피 클래스) 템플릿입니다. 예전부터 이어져 온
관례에 따라, 특성정보는 항상 구조체로 구현하는 것으로 굳어져 있습니다. 관례가 하나 더
있는데, 위처럼 특성정보를 구현하는 데 사용한 구조체를 가리켜 '특성정보 클래스'라고 부릅
니다.

iterator_traits 클래스가 동작하는 방법은 이렇습니다. iterator_traits<IterT>
안에는 IterT 타입 각각에 대해 iterator_category라는 이름의 typedef 타입이
선언되어 있습니다. 이렇게 선언된 typedef 타입이 바로 IterT의 반복자 범주를 가리키
는 것입니다.

iterator_traits는 이 반복자 범주를 두 부분으로 니누어 구현합니다. 첫 번째
부분은 사용자 정의 반복자 타입에 대한 구현인데, 사용자 정의 반복자 타입으로 하여금
iterator_category라는 이름의 typedef 타입을 내부에 가질 것을 여구사항으로 둡
니다. 이때 이 typedef 타입은 해당 태그 구조체에 대응되어야 합니다. 예를 들어, deque
의 반복자는 임의 접근 자이므로, deque 클래스(템플릿)에 쓸 수 있는 반복자는 다음과
같은 형태일 것입니다.

template<...>	// 템플릿 매개변수는 편의상 생략
class deque
{
public:
	class iterator
	{
		public:
			typedef random_access_iterator_tag iterator_category;
			...
	};
	...
};

다른 예로, list의 반복자는 양방향 반복자이기 때문에 다음과 같이 되어 있습니다.

template<...>	// 템플릿 매개변수는 편의상 생략
class list
{
public:
	class iterator
	{
		public:
			typedef bidirectional_iterator_tag iterator_category;
			...
	};
	...
};

이 iterator 클래스가 내부에 지닌 중첩 typedef 타입을 앵무새처럼 똑같이 재생한
것이 iterator_traits 입니다.

// IterT 타입에 대한 iterator_category는 IterT가 온몸으로 말하고 있는 바 그대로
// 입니다.
// "typedef typename"이 사용된 부분에 대한 설명이 필요하시면 항목 42를 보십시오.
template<typename IterT>
struct iterator_traits
{
	typedef typename IterT::iterator_category iterator_category;
	...
}

위의 코드는 확실히 사용자 정의 타입에 대해서는 잘 돌아가지만, 반복자의 실제 타입이 포
인터인 경우에는 전혀 안 돌아갑니다. 포인터 안에 typedef 타입이 종첩된다는 것부터가
도무지 말이 안 되기 때문입니다. iterator_traits 구현의 두 번째 부분은 바로 반복
자가 포인터인 경우의 처리입니다.

포인터 타입의 반복자를 지원하기 위해 iterator_traits는 포인터 타입에 대한 부분
템플릿 수화(partial template specialization) 버전을 제공 하고 있습니다. 사실 포인터의 
동작 원리가 임의 접근 반복자와 똑같으므로 iterator_traits가 이런 식으로 지원하는
반복자 범주가 바로 임의 접근 반복자입니다.

template<typename IterT>		// 기본제공 포인터 타입에 대한 부분 템플릿 특수화
struct iterator_traits<IterT>
{
	typedef random_access_iterator_tag iterator_category;
	...
}

이쯤 됐으니, 특성정보 클래스의 설계 및 구현 방법에 대해 감을 잡았을 것입니다.
* 다른 사람이 사용하도록 열어 주고 싶은 타입 관련 정보를 확인합니다(예를 들어, 반복자
라면 반복자 범주 등이 여기에 해당됩니다).

* 그 정보를 식별하기 위한 이름을 선택합니다(예: iterator_category).

* 지원하고자 하는 타입 관련 정보를 담은 템플릿 및 그 템플릿의 특수화 버전(예:
iterator_traits)을 제공합니다.

자, 이렇게 iterator_traits가 주어졌으므로(실제로는 std::iterator_traits 입니다.
C++의 표준 라이브러리의 일부이니까요) advance의 의사코드를 다음과 같이 다듬을 수
있습니다.

template<typename IterT, typename DistT>
void advance(IterT& iter, DistT d)
{
	if( typeid(typename std::iterator_traits<IterT>::iterator_category) 
	== typeid(std::random_access_iterator_tag) )
	...
}

잘 될 것 같은 기대감이 용솟음치는 코드입니다만, 아쉽게도 우리가 원하는 형태가 아닙니
다. 첫 번째 걸림돌이 컴파일 문제인데, 이 부분은 항목 48 에서 자세히 살펴보겠습니다. 
일단 지금은 그보다 더 근본적인 문제를 해결해 봅시다. IterT의 타입은 아시다시피 컴파일
도중에 파악되기 때문에, iterator_traits IterT>::iterator_category를 파
악할 수 있는 때도 역시 컴파일 도중입니다. 하지만 if 문은 프로그램 실행 도중에 평가된
단 말씀입니다. 아니, 컴파일 도중에 할 수 있는 것을 굳이 실행 도중에 해야 할 이유가 있
을까요? 진정한 시간 낭비가 아닐 수 없습니다. 게다가 실행 코드의 크기도 비대해지겠죠.

지금 우리에게 정말 있었으면 하는 것은 주어진 타입에 대한 평가를 컴파일 도중에 수행하
는 조건처리 구문요소(if...else 문 같은)입니다. 마치 기다리고나 있었다는 듯이 C++에
는 이런 효과를 얻을 수 있는 방법이 준비되어 있습니다. 바로 오버로딩입니다.

어떤 함수를 오버로딩한다는 것은 매개변수 리스트가 다르지만 f라는 이름은 같은 오버로
드 버전을 여러개 만든다는 것입니다. 이 상태에서 f를 호출하면, 컴파일러는 여러분이 넘
긴 인자를 보고 호출 시의 전후관계에 가장 잘 맞는 오버로드 버전을 골라냅니다. 사실 컴
파일러의 의도는 이렇습니다. "당신이 넘긴 인자 타입에 가장 잘 맞는 오버로드 버전이 이
거면, 이 f를 부를 거야. 이게 아니라 두 번째로 고른 이 오버로드 버전이 가장 잘 맞는 것
이면 이것을 호출할 것이고 말이지. 세 번째로 고른 게 딱 맞으면 그것을 호출하겠어." 뭐,
이런 식이죠. 뭔가가 눈에 보이십니까? 컴파일 타임에 타입에 따라 선택되는 조건처리 구문
요소가 바로 이것입니다. 이걸 써서 advance가 우리가 원하는 대로 동작하게 만들면 되는
거죠. 방법도 아주 간단합니다. advance의 "동작 원리 알맹이"는 똑같게 하고, 받아들이는
iterator_category 객체의 타입을 다르게 해서 오버로드 함수를 만듭니다. 이 오버로
드 함수의 이름은 doAdvance라고 하죠.

template<typename IterT, typename DistT>	// 임의 접근
void doAdvance(IterT& iter, DistT d,		// 반복자에 대해서는 이 구현을
				std::random_access_iterator_tag) // 사용
{
	iter += d;
}

template<typename IterT, typename DistT>	// 양방향 반복자에 대해서는
void doAdvance(IterT& iter, DistT d,		// 이 구현을 사용
				std::bidirectional_iterator_tag)
{
	if( d >= 0 ){ while(d--) ++iter; }
	else { while(d++) -- iter; }
}

template<typename IterT, typename DistT>	// 입력 반복자에 대해서는
void doAdvance(IterT& iter, DistT d,		// 이 구현을 사용
				std::input_iterator_tag)
{
	if( d < 0 )
	{ 
		// 자세한 내용은 아래에
		throw std::out_of_range("Negative distance");
	}
	while(d--) ++iter;
}

forward_iterator_tag는 input_iterator_tag로부터 상속을 받은 것이므로,
input_iterator_tag를 매개변수로 받는 doAdvance는 순방향 반복자도 받을 수 있
습니다. 이제는 앞에서 보신 iterator_tag 구조체들 사이의 상속 관계가 어째서 그렇게
된 건지 이해되실 겁니다(솔직히 말씀드리면, 딱 이것만 생각하고 public 상속 관계를
만든 것은 아닙니다. 일반적 측면에서 파생 클래스 타입에도 작동하는 기본 클래스 타입용 
코드를 작성 할 수 있도록 한 거죠).

보시면 advance는 임의 접근 반복자 및 양방향 반복자에 대해 양수 및 음수 거리를 받을
수 있게 되어 있지만, 순방향 반복자나 입력 반복자를 음수 거리만큼 이동하려고 하면 미정
의 동작이 발생합니다. 필자는 단순히 d가 음수가 아닐 것이라고 가정하고 점검 코드를 구
현했기 때문에, 함수에 음수 거리가 인자로 넘어 올 경우에는 아주 긴 루프가 돌면서 d가
"열심히" 0에 가끼워지는 심각한 상황에 빠질 수 있습니다. 위의 코드에서는 이런 상황을
막기 위해 예외를 던지는 루틴을 넣었습니다. 두 부분 모두 유효한 구현입니다. 미정의 동작
의 저주라고나 할까요. 어떤 일이 일어날지 상상도 못하실 것입니다.

doAdvance 함수의 오버로딩도 마쳤겠다, 이제 advance가 해 줄 일은 오버로딩된
doAdvance를 호출하는 것뿐입니다. 이때 컴파일러가 오버로딩 모호성 해결을 통해 적합
한 버전을 호출할 수 있도록 반복자 범주 타입 객체를 맞추어 전달해야 하겠지요.

template<typename IterT, typename DistT>
void advance(IterT& iter, Dist d)
{
	// iter의 반복자 범주에 적합한 doAdvance의 오버로드 버전을 호출한다.
	doAdvance(iter, d, 
	typename std::iterator_traits<IterT>::iterator_category());
}

특성정보 클래스를 어떻게 사용하는지, 마지막으로 깔끔히 정리해 봅시다.

* "작업자(worker)" 역할을 맡을 함수 혹은 함수 템플릿(예: doAdvance)을 특성정보 
매개변수를 다르게 하여 오버로딩합니다. 그리고 전달되는 해당 특성정보에 맞추어 각 오
버로드 버전을 구현합니다.

* 작업자를 호출하는 "주작업자(master)" 역할을 맡을 힘수 혹은 함수 템플릿(예: advance)
을 만듭니다. 이때 특성정보 클래스에서 제공되는 정보를 넘겨서 작업자를 호출하도록
구현합나다.

특성정보는 C++ 표준 라이브러리에서 발에 치일 정도로 흔히 쓰입니다. iterator_traits는 
여기서 소개한 iterator_category 말고도 제공하는 반복자 관련 정보가 네 가지나 됩니다
(이들 중 가장 유용하게 쓰이는 것이 value_type인데, 항목 42에서 사용 예를 찾으실 수 
있습니다). 또한 문자 타입에 대한 정보를 담고 있는 char_traits도 있고, 숫자 타입에 
대한 정보(표현 한 최소값 및 최대값 등)를 품고 있는 numeric_limits도 있습니다
(numeric_limits라는 이름은 조금 당혹스럽죠? 관례를 따르자면 특성정보 클래스의
이름이 traits" 로 끝나야 할 것 같은데 말이에요. 예전부터 그냥 numeric_limits라고들 
불러왔기 때문에 그대로 이 이름이 굳어진 것입니다).

TR1(항목 54 참조)이 도입되면서 타입 관련 정보를 제공하는 특성정보 클래스가 상당수 추
가되었습니다. 몇 개를 소개하자면 is_fundamental<T>(T가 기본제공 타입인지 알려 줌),
is_array<T>(T가 배열 타입인지 알려 줌), is_base_of<T1, T2>(T1이 T2 와 같거나
T2의 기본 클래스인지 알려 줌) 등입니다. 모두 합치면 추가된 개수만 무려 50개나 됩니다.

이것만은 잊지 말자!
* 특성정보 클래스는 컴파일 도중에 사용할 수 있는 타입 관련 정보를 만들어냅니다. 또한
특성정보 클래스는 템플릿 및 템플릿 특수 버전을 사용하여 구현합니다.
* 함수 오버로딩 기법과 결합하여 특성정보 클래스를 사용하면, 컴파일 타임에 결정되는
타입별 if ... else 점검문을 구사할 수 있습니다.