항목 45: "호환되는 모든 타입"을 받아들이는 데는 멤버 함수 템플릿이 직방!

스파트 포인터(smart pointer)는 포인터처럼 동작하면서 포인터가 주지 못하는 상큼한 기능을 덤으로 갖고 
있는 객체를 일컫습니다. 이를테면, 항목 13에서 힙 기반 자원의 삭제를 제때 수행하게 하는데 표준 라이브러
리의 auto_ptr 및 tr1::shared_ptr 객체를 이용하는 예를 보셨을 것입니다. STL 컨테이너의 반복자도 
스마트 포인터나 마찬가지입니다. 포인터에다가 "++" 연산을 적용해서 연결 리스트의 한 노드에서 다른 노드로 
이동하는 것을 상상이나 하실 수 있겠어요? 그렇지만 list::iterator는 그게 된단 말씀입니다.

포인터에도 스마트 포인터로 대신할 수 없는 특징이 있습니다. 그 중 하나가 암시적 변환(implicit conversion)을 
지원한다는 점입니다. 파생 클래스 포인터는 암시적으로 기본 클래스 포인터로 변환되고, 비상수 객체에 대한 
포인터는 상수 객체에 대한 포인터로의 암시적 변환이 가능하고, 기타 등등 말입니다. 예를 들어, 아래와 같이 
세 수준(level)으로 구성된 클래스 계통이 주어졌다면 그 아래에 나온 것처럼 몇 가지의 타입 변환이 가능할 
것입니다. 

class Top { ... }; 
class Middle: public Top { ... }; 
class Bottorn: public Middle { ... };
Top *pt1 = new Middle;	// Middle* => Top*의 변환
Top *pt2 = new Bottom;	// Bottom* => Top*의 변환 
const Top *pct2 = pt1;	// Top* => const Top*의 변환 
 
이런 식의 타입 변환을 사용자 정의 스마트 포인터를 써서 흉내 내려면 무척 까다롭습니다. 이를테면 다음과 
같은 코드를 컴파일러에 통과시키고 싶은데 말이죠.

template<typename T> 
class SmartPtr 
{ 
public:								// 스마트 포인터는 대개 
explicit SmartPtr (T *realPtr);		// 기본제공 포인터로 초기화됩니다. 
SmartPtr<Top> pt1 = SmartPtr<Middle> (new Middle);	// SmartPtr<Middle> => 
													// SmartPtr<Top>의 변환 
SmartPtr<Top> pt2 = SmartPtr<Bottom> (new Bottom);	// SmartPtr<Bottom> => 
													// SmartPtr<Top>의 변환 
SmartPtr<const Top> pct2 = pt1;						// SmartPtr<Top> =>
													// SmartPtr<const Top>의 변환 

같은 템플릿으로부터 만들어진 다른 인스턴스들 사이에는 어떤 관계도 없기 때문에, 컴파일러의 눈에 비치는 
SmartPtr<Middle>과 SmartPtr<Top>은 완전히 별개의 클래스입니다. 이를테면 vector<float>와 Widget 
사이의 거리랄까요(오해 마세요 전혀 상관없 습니다). 요는, SmartPtr 클래스들 사이에 어떤 변환을 하고 싶다고 
생각했다면, 변환이 되도록 직접 프로그램을 만들어야 한다는 것입니다. 위의 SmartPtr 예제 코드를 보시면, 모든 
문장이 하나같이 new를 써서 스마트 포인터 객체를 만들고 있죠. 그런 의미에서, 스마트 포인터의 생성자를 우리가 
원하는 대로 동작하게끔 작성하는 쪽에 일단 초점을 맞춤시다. 생성자 함수를 직접 만드는 것으로는 우리에게 필요
한 모든 생성자를 만들어내기란 불가능합니다. 위의 클래스 계통에서는 SmartPtr<Middle> 혹은 SmartPtr<Bottom>
으로부터 SmartPtr<Top>을 생성할 수 있지만, 나중에 클래스 계통이 더 확장된다든지 하면 (확장된) 다른 스마트 
포인터 타입으로부터 SmartPtr<Top> 객체를 만들 방법도 마련되어야 하니까요. 쉽게 말해서, 나중에 다음과 같은
클래스를 추가했다면

class BelowBottom: public Bottom { .. . };

SmartPtr<BelowBottom>으로부터 SmartPtr<Top> 객체를 생성하는 부분도 우리가 지원해야 한다는 이야기입니다. 
이것 때문에 SmartPtr 템플릿까지 수정하는 것은 분병 제정신인 사람으로서 할 일이 아닌 것 같고요.

원칙적으로 지금 우리가 원하는 생성자의 개수는 '무제한'입니다. 그런데 템플릿을 인스턴스 화하면 '무제한' 개수의
함수를 만들어낼 수 있죠. 그러니까 SmartPtr에 생성자 함수(function)를 둘 필요가 없을 것 같습니다. 바로 생성
자를 만들어내는 템플릿(template)을 쓰는 것입니다. 이 생성자 템플릿은 이번 항목에서 이야기할 멤버 함수 템플릿
(member function template, 멈버 템플릿이라고도 함)의 한 예인데요. 멤버 함수 템플릿은 간단히 말해서 어떤 
클래스의 멤버 함수를 찍어내는 템플릿을 일걷습니다.

template<typename T> 
class SmartPtr 
{ 
public: 
	tempalte<typenamc U>SmartPtr(const SmartPtr<U>& other);	//"일반화된 복사 생정자"를 만들기 위해
	...														//마련한 멤버 템플릿
};

위의 코드를 간단히 말로 풀어 보면 이렇습니다. 모든 T 타입 및 모든 U 타입에 대해서, SmartPtr<T> 객체가 
SmartPtr<U>로부터 생성될 수 있다는 이야기입니다. 그 이유는 SmartPtr<U>의 참조자를 매개변수로 받아들이는 생성
자가 SmartPtr<T> 안에 들어 있기 때문입니다. 이런 꼴의 생성자같은 템플릿을 써서 인스턴스화되지만 타입이 다른 타입
의 객체로부터 원하는 객체를 만들어 주는(즉, SmartPtr<U>로부터 SmartPtr<T>를 만들어내는) 생성자를 가리켜 
일반화 복사 생성자(generalized copy constructor)라고들 부릅니다.
위의 예제에 나온 일반화 복사 생성자는 explicit로 선언되지 않았습니다. 생각 없이 그렇게 한 것이 아니니 잘 봐 주세요. 
기본제공 포인터는 포인터 타입 사이의 타입 변환(이를 테면 파생 클래스 포인터 => 기본 클래스 포인터 형식의 변환)이 암
시적으로 이루어지며 캐스팅이 필요하지 않기 때문에, 스마트 포인터도 이런 형태로 동작하도록 흉내 내는 게 맞는다고 생각
합니다. 그래서 여기서는 템플릿으로 만든 생성자 앞에 explicit 키워드를 빼면 딱 그렇게 되는 거죠.

보시면 알겠지만, 지금 SmartPtr에 선언된 일반화 복사 생성자는 실제로 우리가 원하는 것보다 더 많은 것을 해 줍니다. 
그렇죠 우리는 SmartPtr<Bottom>으로부터 SmartPtr <Top>을 만들 수 있기만을 원했지, 반대로 SmartPtr<Top>으로부
터 SmartPtr<Bottom> 을 만들 수 있는 것까지는 바라지 않았단 말입니다. 이것은 public 상속의 의미(항목 32 참 조)
에 역행하는 오버입니다. 게다가 지금의 생성자로는 심지어 SmartPtr<double>로 부터 SmartPtr<int>를 만든다든지 하
는 것도 가능해서, 뭔가 대책이 필요합니다. 이에 대응되는 기본제공 포인터 타입으로 바꿔 봤을 때 int*에서 double*로 
진행되는 암시적 변환이 가능하지 않기 때문입니다. 바람직스러움과 거리가 먼 이런 멤버 함수들이 멤버 템플릿으로부터 태
어나 인간계를 어지럽히기 전에, 어떻게 해서든 이들을 저세상으로 돌려보내 야 하겠습니다 
auto_ptr 및 tr1::shared_ptr에서 쓰는 방법을 그대로 따라서 SmartPtr도 get 멤버 함수를 통해 해당 스마트 포인터 
객체에 자체적으로 담긴 기본제공 포인터의 사본을 반환한다고 가정하면(항목 15 참조), 이것을 이용해서 생성자 템플릿에 
우리가 원하는 타입 변환 제약을 줄 수 있을 것 같습나다. 아래를 보시죠.

template<typename T> 
class SmartPtr 
{ 
public: 
	tempalte<typenamc U>SmartPtr(const SmartPtr<U>& other)//이 SmartPtr에 담긴 포인터를
	:heldPtr(other.get()){...}					//다른 SmartPtr에 담긴 포인터로 초기화합니다.
	T* get() const { return heldPtr; }
	...
private:
	T* heldPtr;				//SmartPtr에 담긴 기본 제공 포인터
};

보시다시피 멤버 초기화 리스트를 사용해서, SmartPtr<T>의 데이터 멤버인 T* 타입의 포인터를 SmartPtr<U>에 들어 
있는 U* 타입의 포인터로 초기화했습니다. 이렇게 해 두면 U*에서 T*로 진행되는 암시적 변환이 가능할 때만 컴파일 
에러가 나지 않습니다. 우리가 원했던 바를 그대로 코드로 옮긴 것입니다. 위와 같은 제약을 가했을 경우에 얻어지는 실
제 효과는 이렇게 정리할 수 있습니다. 이제 SmartPtr<T>의 일반화 복사 생성자는 호환되는(compatible) 타입의 매
개변수를 넘겨받을 때만 컴파일되도록 만들어졌다고요.

멤버 함수 템플릿의 활용은 비단 생성자에만 그치지 않습니다. 가장 흔히 쓰이는 예를 하나 더 말씀드리면 대입 연산입니
다. 예를 들면, TR1의 shared_ptr(역시 항목 13 참조) 클래스 템플릿은 호환되는 모든 기본제공 포인터, 
tr1::shared_ptr, auto_ptr, tr1::weak_ptr(항목 54 참조) 객체들로부터 생성자 호출이 가능한데다가, 이들 중 
tr1::weak_ptr을 제외한 나머지를 대입 연산에 쓸 수 있도록 만들어져 있습니다. 말이 나온 김에 tr1에서 
tr1::shared_ptr 템플릿이 어떻게 나와 있는지 짤막하게 잘라 보여드리겠습니다. 템플릿 매개변수를 선언할 때 
typename 대신에 class를 쓰는 원제작자의 취향도 함께 찾으실 수 있을 거예요(항목 42에서 이야기했듯, 이 경우에 
typename 및 class 키워드 는 의미가 같습니다). 

template<class T> 
class shared_ptr 
{ 
public:
	//호환되는 모든 기본 제공 포인터, shared_ptr, weak_ptr, auto_ptr 객체로부터 생성자 호출이 가능합니다.
	tempalte<class Y>explicit shared_ptr(Y* p);		
	tempalte<class Y>shared_ptr(shared_ptr<Y> const& r);
	tempalte<class Y>explicit shared_ptr(weak_ptr<Y> const& r);
	tempalte<class Y>explicit shared_ptr(auto_ptr<Y> const& r);

	//호환되는 모든 shared_ptr 혹은 auto_ptr로부터 대입이 가능합니다.
	tempalte<class Y>shared_ptr& operator=(shared_ptr<Y> const& r);
	tempalte<class Y>shared_ptr& operator=(auto_ptr<Y> const& r);
	...
};

일반화 복사 생성자를 제외하고 모든 생성자가 explicit로 선언되어 있는 게 보일 것입니다. 무슨 뜻인고 하니, 
shared_ptr로 만든 어떤 타입으로부터 또 다른 (shared_ptr로 만든) 타입으로 진행되는 암시적 변환은 허용되지만 
기본제공 포인터 혹은 다른 스마트 포인터 타입으로부터 변환되는 것은 막겠다는 뜻입니다[단, 명시적 변환(이를테면 캐스팅을 
쓴다든 지)은 오케이입니다]. 한 가지 더 재미있는 부분은 tr1::shared_ptr 생성자와 대입 연산 자에 넘겨지는 
auto_ptr이 const로 선언되지 않은 것인데, 이와 대조적으로 tr1::shared_ptr 및 tr1::weak_ptr은 const로 
넘겨지도록 되어 있죠. 다 이유가 있습 니다. auto_ptr은 복사 연산으로 인해 객체가 수정될 때 오직 복사된 쪽 하나만 
유효하게 남는다는 사실을 반영한 것입니다(항목 13 참조).

멤버 함수 템플릿은 코드 재사용만큼이나 기특하고 훌륭한 기능이지만, C++ 언어의 기본 규칙까지 바꾸지는 않습니다. 
개발자가 가만 내버려 두면 컴파일러가 멋대로 만들어내는 클래스 멤버 함수 네 개 중 기본 생성자와 소멸자를 제외한 두 
개가 복사 생성자와 복사 대엽 연산자라는 이야기를 항목 5에서 말씀드렸습니다. tr1::shared_ptr에는 분명히 일반화 
복사 생성자가 선언되어 있는데, T 타입과 Y 타입이 동일하게 들어온다면 이 일반화 복사 생성자는 분명 "보통의" 복사 
생성자를 만드는 쪽으로 인스턴스화되겠지요. 자 그럼 어떤 tr1::shared_ptr 객체가 자신과 동일한 타입의 다른 
tr1::shared_ptr 객체로부터 생성되는 상황에서, 컴파일러는 tr1::shared_ptr의 복사 생성자를 만들까요? 아니면 
일반화 복사 생성자 템플릿을 인스턴스화할까요?

앞에서 말씀드린 대로 멤버 템플릿은 언어의 규칙을 바꾸지는 않습니다. 이때의 규칙이란 바로, '복사 생성자가 필요한데 
프로그래머가 직접 선언하지 않으면 컴파일러가 자동으로 하 나 만든다'라는 것이죠. 그러나 일반화 복사 생성자(그러니까 
멤버 템플릿)를 어떤 클래스 안에 선언하는 행위는 컴파일러 나름의 복사 생성자(비템플릿)를 만드는 것을 막는 요소가 
아닙니다. 일반화 복사 생성자는 일반화 복사 생성자일 뿐, 보통의 복사 생성자가 아니라는 거죠. 따라서 어떤 클래스의 
복사 생성을 전부 여러분 손아귀에 넣고 싶으시면, 일반화 복사 생성자는 물론이고 "보통의" 복사 생성자까지 여러분이 
직접 선언해야 합니다. 대입 연산자도 마찬가지이고요. 그럼, tr1::shared_ptr은 이 부분을 어떤 식으로 처리했는지 
보실까요?

template<class T> 
class shared_ptr 
{ 
public:
	shared_ptr(shared_ptr<Y> const& r);	// 복사 생성자
	tempalte<class Y>shared_ptr(shared_ptr<Y> const& r);// 일반화 복사 생성자
		
	shared_ptr& operator=(shared_ptr const& r);	// 복사 대입 연산자
	tempalte<class Y>shared_ptr& operator=(auto_ptr<Y> const& r);// 일반화 복사 대입 연산자
	...
};

이것만은 잊지 말자! 
* 호환되늠 모든 타입을 받아들이는 멤버 함수를 만들려면 멈버 함수 템플릿을 사용합시다. 
* 일반화된 복사 생성 연산과 일반화된 대입 연산을 위해 멤버 템플릿을 선언했다 하더라도 보통의 복사 생성자와 복사 
대입 연산자는 여전히 직접 선언해야 합니다.