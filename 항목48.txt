항목 48: 템플릿 메타프로그래멍, 하지 않겠는가?

템플릿 메타프로그래밍(template metaprogramming: TMP) 7)은 컴파일 도중에 실행되는 
템플릿 기반의 프로그램을 작성하는 일을 말합니다. 대체 이게 뭘까요? 1분만 곰곰이 생각해 
보세요. 템플릿 메타프로그램은 c++ 컴파일러가 실행시키는, c++ 로 만들어진 프로그램입니
다. TMP 프로그램이 실행을 마친 후엔 그 결과로 나온 출력물(템플릿으로부터 인스턴스화된 
c++ 소스 코드)이 다시 보통의 컴파일 과정을 거치는 것입니다.

어느 별나라에서 뚝 떨어졌는지 참으로 신통방통하다는 느낌, 안 드세요? 저런, 평소에 생각
을 별로 안 해 보신 독자분이시군요.

사실 c++ 는 템플릿 메타프로래밍을 염두에 두고 설계되지는 않았습니다. 그런데 1990 년
대 초에 TMP 개념이 발굴된 이후 TMP의 뛰어난 유용성이 하나 둘 드러나면서, 마침내는
c++ 언어 및 표준 라이브러리에 TMP를 용이하게 만드는 확장요소가 추가될 여지까지 생
긴 겁니다. 네, 맞습니다. TMP는 발굴된 것이지 처음에 누가 작정하고 만든 것이 아닙니다.
TMP의 축을 이루는 갖가지 특징들은 템폴릿이란 것이 c++ 에 추가되면서 저절로 따라 들
어와 있었습니다. 그러니까, 영특하고도 기발한 방법으로 템플릿을 사용하는 방법 이 있다는
사실을 누군가가 알아채 주기만 하면 되는 것이었죠.

TMP에는 엄청난 강점이 두 개나 있습니다. 
첫째, TMP를 쓰면 다른 방법으로는 까다롭거나 불가능한 일을 굉장히 쉽게 할 수 있습니다. 
둘째, 템플릿 메타프로그램은 c++ 컴파일이 진행되는 동안에 실행되기 때문에, 기존 작업을 
런타임 영역에서 컴파일 타임 영역으로 전환할 수 있습니다. 
이 때문에 두 가지 짭짤한 재미를 맛볼 수 있습니다. 하나는 일반적으로 프로그램 실행 도중에 
잡혀 왔던 몇몇 에러 들을 컴파일 도중에 찾을 수 있다는 점입니다.

::7) 데이비드 에이브럼즈(David Abrahams)와 알렉세이 구브로보이 (Alexey Gurtovoy)가 
공저한 "C++ template Metaprograrmming: Concepts, Tools, and Techniques 
from Boost and Beyond"(Addison-Wesley, 2004)를 참고하기 바란다. 현존하는 국내 
텍스트 중 TMP를 가장 잘 설명한 책이다. 특히 컴파일에 걸리는 오버헤드를 비교한 실험료 
등은 TMP를 고민히는 사람들에게 적합한 기준을 제시한다. 한국어판으로는 "C++ Template
Metaprograrmming: Boost로부터 배우는 개념, 도구, 기법"(류광 옮김, 정보문화샤 2005) 
이 있다.-옮긴이-하지만 절판이라 구할 수 없음

또 하나는 TMP를 써서 만든 C++ 프로그램이 확실히 모든 면에서 효율적일 여지가 많다는
것입니다. 컴파일 타임에 동작을 다 해 가지고 오기 때문에 실행 코드가 작아지고, 실행 시
간도 짧아지며, 메모리도 적게 잡아먹는 것이죠(하지만 기존 작업을 런타임에서 컴파일 타임으
로 전환하면서 컴파일 타임이 길어지는 결과도 나타납니다. TMP를 냉한 프로그램은 TMP를 쓰
지 않고 그와 똑같이 동작하는 프로그램과 비교해서 컴파일 시간이 꽤 깁니다).

기억나실는지 모르겠습니다만, 바로 앞 항목에 나온 바 있는 STL의 advance에 대한 유사 코드,
이제 다시 가져와 보겠습니다(항목 47이죠. 아직 읽지 않으셨다면 지금 읽어두시는 것이 좋겠습
니다. 이번 항목은 독자 여러분이 항목 47의 내용에 익숙하다고 가정하고 가정한 상태에서 썼거든요).
다시 한번 보시죠. 유사코드 부분을 알아보시기 좋게 강조 표시해 놓은 것도 기억나실 것입니다.