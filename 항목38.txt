항목 38: "has-a(...는...를 가짐)" 혹은 "is-implemented-in-terms-of
(...는...를 써서 구현됨)"를 모형화 할 때는 객체 합성을 사용하자.

합성(composition) 이란, 어떤 타입의 객체들이 그와 다른 타입의 객체들을 포함하고
있을 경우에 성립하는 그 타입들 사이의 관계를 일컫습니다. 포함된 객체들을 모아서 이들
을 포함한 다른 객체를 합성한다는 뜻인데, 이를테면 다음과 같은 경우죠.

class Address {...};	// 누군가의 거주지

class PhoneNumber {...};

class Person 
{
public:
	...
private:
	std::string name;		// 이 클래스를 이루는 객체 중 하나
	Address address;		// 마찬가지
	PhoneNumber voiceNumber;// 역시 마찬가지
	PhoneNumber faxNumber;	// 이것도 마찬가지
};

예제를 보시면 알겠지만 Person 객체는 string, Address, PhoneNumber 객체로 이
루어져 있습니다. 개발자들 사이에선 '합성' 대신에 다른 용어들도 많이 쓰입니다. 이를테면
레이어링(layering), 포함(containment), 통합(aggregation) 혹은 내장(embedding) 
등으로도 알려져 있지요.

항목 32에서 public 상속의 의미가 "is-a(...는 ...의 일종이다)"라고 공부한 적이 있었죠. 
객체 합성 역시 의미를 갖고 있답니다. 실제로는 뜻이 두 개나 되는데, "has-a(...는 ...를 가짐)"
을 뜻할 수도 있고 "is-implemented-in-terms-of(...는 ...를 써서 구현됨)"을 뜻할 수도
있습니다. 이렇게 뜻이 두 개인 이유는 소프트웨어 개발에서 여러분이 대하는 영역(domain)이 
두 가지이기 때문입니다. 객체 중에는 우리 일상생활에서 볼 수 있는 사물을 본 뜬 것들이 있
죠. 이를테면 사람, 이동수단, 비디오 프레임 등인데, 이런 객체는 소프트웨어의 응용 영역
(application domain)에 속합니다. 응용 영역에 속하지 않는 나머지들은 버퍼, 뮤텍스, 탐색
트리 등 순수하게 시스템 구현만을 위한 인공물입니다. 이런 종류의 객체가 속한 부분은 
소프트웨어의 구현 영역(implementation domain)이라고 합니다. 여기서 객체 합성이 응용 
영역의 객체들 사이에서 일어나면 has-a 관계입니다. 반면, 구현 영역에서 일어나면 그 객체
합성의 의미는 is-implemented-in-terms-of 관계를 나타내는 것엽니다.

위의 예제에서 Person 클래스가 나타내는 관계는 has-a 관계입니다. 하나의 Person 객
체는 이름, 주소, 음성전화 및 팩스전화 번호를 가지고 있습니다. 사람이 이름의 일종(Person
is a name) 이라든지 사람이 주소의 일종(Person is an address) 이라고는 말할 수 없겠지요.
사람이 이름을 가지며 사람이 주소를 가진다고 말하는 것이 자연스럽습니다. 이렇게 구분하는 
데 어려움을 느끼는 사람은 거의 없으므로, is-a 관계와 has-a 관계의 역할을 햇갈리는 
경우는 그다지 없습니다.

상대적으로 오락가락히는 부분이 바로 is-a 관계와 is-implemented-in-terms-of 관계의 
차이점일 것입니다. 예를 하나 들어 보죠. 객체로 구성된 작은 집합(set), 정확히 말해서 
중복 원소가 없는 집합체를 나타내고 저장 공간도 적게 차지하는 클래스의 템플릿이 하나 필요하다고
가정합시다. 코드 재사용이야말로 개발자가 할 수 있는 가장 장하고 갸륵한 일이라고들 
하길래, 여러분은 표준 라이브러리의 set 템플릿을 활용해 보기로 결정합니다. 이미 누군가가
훌륭하게 만든 것을 그대로 쓸 수 있는데 구태여 새 템플릿을 작성할 이유가 없죠 그렇죠?그런데 재수가 없으려니 시작부터 문제가 생겼습니다. set 템플릿이 원소 한 개당 포인터
세 개의 오버헤드가 걸리도록 구현되어 있다는 점이 신경을 건드리는군요. 그럴 만도 한 것
이, set 템플릿은 대개 균형 탐색 트리(balanced search tree)리로 구현되어 있기 때문입니다.
탐색, 삽입, 삭제에 걸리는 시간 복잡도를 로그 시간으로 보장하기 위해 이렇게 만든 것입니
다. 속력이 공간보다 더 중요한 분야에서는 통하는 설계이지만, 지금 여러분에게 필요한 것
은 속력보다는 공간이잖습니까. 그러 니까 표준 라이브러리의 set 템플릿은 적당하지 않습
니다. 아무래도 여러분이 템플릿을 그냥 만들어야 할 것 같다는 생각이 들려는 순간입니다.

게으르다고 팀장에게 육두문자를 들어 먹을지언정, 코드 재사용은 여전히 개발자가 할 수
있는 가장 장하고 갸륵하며 훌륭한 일입니다. 자료구조만큼은 꽤 한다고 생각하는 여러분이
기에, 집합 클래스 템플릿을 구현할 때 쓸 만한 것들도 이미 머릿속에 준비 완료해 놓았습
니다. 이 중에서 연결 리스트(linked list)를 꺼내 봅니다. 표준 C++ 라이브러리에 list
템플릿이 있다는 사실도 역시 알고 있는 여러분이기에, 득의만면하게 이것을 (재)사용하기로
결정합니다.

이번 재사용의 포인트는, Set 템플릿을 만들되 list에서 파생된 형태부터 시작하도록 만
든다는 것입니다. 다시 말해, Set<T>는 list<T>로부터 상속을 받습니다. 어찌 됐든 실제
로 Set 객체는 list 의 일종이 되는 것입니다. 이런 생각을 하나 가득 가슴에 품고 Set
템플릿을 다음과 같이 선언해 봅니다.

template<typename T>	// Set을 만든답시고 list를 잘 못 쓰는 방법
class Set: public std::list<T> {...};

모든 것이 순조롭게 풀릴 것 같은 기대치 완전충전의 코드입니다만, 사실은 잘못까지 충전
되어 버렸으니, 이를 어쩌나, 일 났습니다. 항목 32의 설명을 보신 분은 아시겠지만, D와 B
사이에 is-a 관계가 성립하면 B에서 참인 것들이 전부 D에서도 참이어야 합니다. 하지만
list 객체는 중복 원소를 가질 수 있는 컨테이너란 말이죠. 그러니까 3051 이란 값이
list<int>에 두 번 삽입되면, 이 리스트는 3051의 사본 두 개를 품게 됩니다. 이와 대조
적으로, Set 객체는 원소가 중복되면 안 됩니다. 3051이 Set<int>에 두 번 삽입되더라
도 이 집합 객체에 들어 있는 3051은 오직 하나란 말씀입니다. 따라서 Set이 list의 일
종(is-a)이라는 명제는 참이 아닙니다. list 객체에 해당하는 사실이 Set 객체에서도 통
하는 게 아니니까요.

이들 두 클래스 사이의 관계가 is-a가 될 리 없으므로, public 상속은 지금의 관계를 모형
화하는 데 맞지 않습니다. 정답은 이번 항목의 제목에 있는데, Set 객체는 list 객체를 
써서 구현되는(is implemented in terms of) 형태의 설계가 가능하다는 실을 잡아내는 
것입니다.

template<class T>	// Set을 만드는 데 list를 제대로 쓰는 방법
class Set
{
public:
	bool member(const T& item) const;
	void insert(const T& item);
	void remove(const T& item);

	std::size_t size() const;
private:
	std::list<T> rep;	// Set 데이터의 내부 표현부
};

Set의 멤버 함수는 list에서 이미 제공하는 기능 및 표준 C++ 라이브러리의 다른 구성
요소를 잘 버무려서 만들기만 하면 되기 때문에, 실제 구현은 아주 쉽게 이해할 수 있을 
정도로 간단합니다. 여러분이 STL 쓰는 방법에만 어색하지 않다면 말이죠.

template<typename T>
bool Set<T>::member(const T& item) const
{
	return std::find(rep.begn(), rep.end(), item) != rep.end();
}

template<typename T>
void Set<T>::insert(const T& item)
{
	if(!member(item)) rep.push_back(item);
}

template<typename T>
void Set<T>::remove(const T& item)
{
	typename std::list<T>::iterator it =	// 여기에 나온 "typename"에
	std::find(rep.begin(), rep.end(), item);// 대한 이야기는 항목 42 참고

	if(it != rep.end()) rep.erase(it);
}

template<typename T>
std::size_t Set<T>::size() const
{
	return rep.size();
}