7 템플릿과 일반화 프로그래밍

C++ 템플릿을 만들려고 했던 윈래 동기는 정말 단순했습니다. 사용자가 타입에 관계없는 컨테이너(container)를 
만들어 사용할 때 타입 안전성을 부여할 수 있도록 히는 것이었죠. 이를테변 vector, list, map 같은 것 말입니다. 
그런데 템플릿을 이런데 저런데에 가지고 노는 사람들이 늘어나면서, 이것으로 할 수 있는 일들도 차츰 더 많이 발견
되었습니다. 템플릿을 통해 윈래의 목적을 달성한 컨테이너는 그 자체만으로도 훌륭했지만 템플릿의 한 응용 분야로 
파생된 일반화 프로그래잉(generic programming, 조작할 객체의 타입과 상관없이 코드를 작성하도록 하는 개념)은 
그것 못지않게 더 기가 막혔습니다. for each, find, merge 등의 STL 알고리즘이 바로 이 일반화 프로그래밍의 
멋진 본보기 되겠습니다 급기야, C++ 템플릿 메커니즘은 그 자체가 튜링 완전(Turing-complete)성을 갖고 있다는 
사실까지 밝혀집니다. 다시 말해 C++ 템플릿을 사용하면 계산 가능한(computable) 어떤 값도 계산할 수 있다는 
것입니다. 이 사실이 퍼지면서 템플릿 메타프로그래밍(metaprogramming) 이라는 새로운 영역이 탄생하게 됩니다. 
짤막하게 말씀드리면 컴파일러 내부에서 실행되고 컴파일 과정이 끝날 때 실행을 멈추는 또 하나의 프로그램을 만드는 
것입니다. 실제로 요즘엔 컨테이너가 C++ 템플릿 분야에서 차지히는 부분은 정말 작답니다. 이렇듯 템플릿의 활용 영
역은 팔색조처럼 다양해졌지만, 어떤 영역을 막론하고 템플릿 기반 프로그래밍이란 것의 밑바닥에는 몇 개 되지 않는 
핵심 아이디어가 단단하게 자리히고 있습니다. 이들 아이디어가 무엇인지를 조명하는 것이 이 장의 목표입니다.

이 장을 읽는다고 해서 별안간 초절정 템플릿 프로그래밍 내공이 생기는 것은 아닙니다만, 템플릿 프로그래멍에 있어 
탄탄한 기초를 기르는 데는 충분할 것이라고 확신합니다. 또한 현재 여러분이 자신 있게 구사할 수 있는 템플릿 프로
그래밍 영역을 원하는 만큼 넓히는 데 필요한 지식도 얻을 수 있을 거예요. 이제 시작합시다 

항목 41:템플릿 프로그래밍의 천릿길도 암시적 인터페이스와 컴파일 타임 다형성부터

객체 지향 프로그래밍의 세계를 회전시키는 축은 명시적 인터페이스(explicil inlerface)와 런타임 다형성(runlime 
polymorphism)입니다. 예를 들어 아래의 클래스(클래스 자체의 존재감이나 의미는 없습니다)가 주어졌고, 

class Widget
{
	public : 
	Widget() ; 
	virtual ~Widget() ; 
	virtual std::size_t size() const; 
	virtual void normalize(); 
	void swap(Widget& other); // 항목 25를 참고하세요.
	...
};

다음의 함수(마찬가지로 의미는 없습니다)가 있을 때, 

void doProcessing(Widget& w) 
{
	if(w.size() > 10 && w != someNastyWidget) 
	{
		Widget temp(w); 
		temp.normalize(); 
		temp.swap(w); 
	}
}

doProcessing 함수 안에 있는 w에 대해 말할 수 있는 부분은 다음과 같습니다.

1. w는 Widget 타입으로 선언되었기 때문에, w는 Widget 인터페이스를 지원해야 합니다. 이 인터페이스를 소스 코드
(Widget이 선언된 .h 파일 등)에서 찾으면 이것이 어떤 형태인지를 확인할 수 있으므로, 이런 인터페이스를 가리켜 
명시적 인터페이스라고 합니다. 다시 말해, 소스 코드에 명시적으로 드러나는 인터페이스를 일컫습니다. 

2. Widget의 멤버 함수 중 몇 개는 가상 함수이므로, 이 가상 함수에 대한 호출은 런타임 다형성에 의해 이루어집니다. 다시 
말해, 특정한 함수에 대한 실제 호출은 w의 동적 타입(항목 37 참조)을 기반으로 프로그램 실행 중, 즉 런타임에 결정됩니다.

템플릿과 일반화 프로그래밍의 세계에는 뿌리부터 뭔가 다른 부분이 있습니다. 명시적 인터페이스 및 런타임 다형성은 그대로 존재하긴 
하지만 중요도는 사뭇 떨어집니다. 이 바닥에서 활개를 치고 다니는 주인공은 암시적 인터페이스(implicit interface)와 컴파일 타
임 다형성(compile-time polymorphism)입니다. 어떻게 그렇게 되는지를 확인하는 방법은 그리 어렵지 않습니다. doProcessing 
함수를 함수 템플릿으로 바꿀 때 무슨 일이 생기는지만 보면 되거든요.

template<typename T> 
void doProcessing(T& w)
{
	if(w.size() > 10 && w != someNastyWidget) 
	{ 
		T temp(w); 
		temp.normalize(); 
		temp.swap(w); 
	}
}

이번에는 doProcessing 템플릿 안의 w에 대해서 어떻게 말할 수 있을까요?

1. w가 지원해야 히는 인터페이스는 이 템플릿 안에서 w에 대해 실행되는 연산이 결정합니다. 지금의 경우를 보면 size, normalize,
 swap 멤버 함수를 지원해야 하는 쪽은 w의 타입, 즉 T입니다. 그뿐 아니라 T는 복사 생성자도 지원해야 하고(temp를 만들어야 하니까, 
 부등 비교를 위한 연산도 지원해야 합니다(someNastyWidget과 비교해야 하니까). 뒷부분을 보면 아시겠지만 이 이야기는 사실 완벽하
 게 정확한 것은 아닙니다. 하지만 지금은 이 정도변 충분하다고 생각합니다. 진짜 중요한 점은, 이 템플릿이 제대로 컴파일되려면 몇 개의 
 표현식이 '유효(valid)'해야 하는데 이 표현식들은 바로 T 가 지원해야 하는 암시적 인터페이스라는 점입니다.

2.  w가 수반되는 함수 호출이 일어날 때, 이를테면 operator> 및 operator!= 함수가 호출될 때는 해당 호출을 성공시키기 위해 템플
릿의 인스턴스화가 일어납니다. 이러한 인스턴스화가 일어나는 시점은 컴파일 도중입니다. 인스턴스화를 진행하는 함수 템플릿에 어떤 템플릿 
매개변수가 들어가느냐에 따라 호출되는 함수가 달라지기 때문에, 이것을 가리켜 컴파일 타임 다형성이라고 합니다.

혹시 템플릿을 한 번도 시용해 본 적이 없더라도, 런타임 다형성과 컴파일 타임 다형성의 차이를 헷갈리는 분은 없어야 하겠습니다. 오버로드
된 함수 중 지금 호출할 것을 골라내는 과정(컴파일 중에 일어납니다)과 가상 함수 호출의 동적 바인딩(프로그램 실행 중에 일어나고요)의 
차이점과도 흡사하니까요. 반면, 명시적 인터페이스와 암시적 인터페이스의 차이는 템플릿에서 처음 접하는 부분일 것 같은데요, 좀더 자세히 
알아보는 시간을 갖도록 합시다.

명시적 인터페이스는 대개 함수 시그너처로 이루어집니다. 아시다시피 시그너처는 함수의 이름, 매개변수 타입, 반환 타입 등을 통틀어 부르는 
용어죠. 그러니까 앞에서 보신 예제 클래스인 Widget의 public 인터페이스는, 

class Widget
{
	public : 
	Widget() ; 
	virtual ~Widget() ; 
	virtual std::size_t size() const; 
	virtual void normalize(); 
	void swap(Widget& other);
};

생성자, 소멸자를 포함해서 size, normalize, swap 함수 그리고 이들의 매개변수 타입, 반환 타입 및 각 함수의 상수성 여부로 이루어져 
있는 것이죠(게다가 컴파일러가 자동으로 만들어 놓은 복사 생성자와 복사 대입 연산자도 포함됩니다. 항목 5 참조). typedef 타입이 있을 
경우에는 이것도 포함될 수 있습니다. 그리고 데이터 멤버의 경우에는 데이터 멤버를 private 멤버로 만들라는 항목 22의 이야기를 대담하게 
어겨 주셨다고 해도 시그너처에 들어가지 않습니다. 

반면, 암시적 인터페이스는 사뭇 다릅니다. 함수 시그너처에 기반하고 있지 않다는 것이 가장 큰 차이점입니다. 암시적 인터페이스를 이루는 요
소는 유효 표현식(expression)입니다. doProcessing 템플릿의 시작부분에 있는 조건문을 다시 한 번 봐 주세요.

template<typename T> 
void doProcessing(T& w)
{
	if(w.size() > 10 && w != someNastyWidget) 
	{ 
		T temp(w); 
		temp.normalize(); 
		temp.swap(w); 
	}
}

이때 T(w의 타입)에서 제공될 암시적 인터페이스에는 다음과 같은 제약이 걸릴 테지요.

1. 정수 계열의 값을 반환하고 이름이 size인 함수를 지원해야 합니다.
2. T 타입의 객체 둘을 비교하는 operator!= 힘수를 지원해야 합니다(여기서 someNastyWidget 객체의 타입은 T라고 가정합니다).

실제로는 연산자 오버로딩의 가능성이 있기 때문에 T는 위의 두 가지 제약 중 어떤 것도 만족시킬 필요가 없습니다. 우선 첫 번째 제약부터 보죠. 
T가 size 멤버 함수를 지원해야 하는 것은 맞습니다. 기본 클래스로부터 물려받을 수도 있다는 점은 간과할 순 없더라도 말이죠. 그렇다고 해도 이 
멤버 함수는 수치 타입을 반환할 필요까지는 없습니다. 심지어, operator>의 정의에 필요한 타입도 반환할 필요가 없고요. size 멤버 함수가 해야 
하는 일은 별 거 없습니다. 그저 어떤 X 타입의 객체와 int(10이 int 타입이니까)가 함께 호출될 수 있는 operator>가 성립될 수 있도록, X 타
입의 객체만 반환하면 임무 종료인 것입니다. 한편, operator> 함수는 반드시 X 타입의 매개변수플 받아들일 이유가 없습니다. 그 이유는, 이 함수
가 Y 타입의 매개변수를 받도록 정의되어 있고 X 타입에서 Y 타입으로 암시적인 변환이 가능하다면 만사 오케이!이기 때문입니다.

첫 번째 제약의 경우와 비슷한 이치로, T가 operator!= 함수를 지원해야 한다는 두 번 째 제약도 필수 요구사항이 되지 않습니다. operator!= 
함수가 X 타입의 객체 하나와 Y 타입의 객체 하나를 받아들인다고 하면 이 부분은 별 걸림돌 없이 넘어갈 수 있기 때문입니다. T가 X로 변환될 수 
있으며 someNastyWidget의 타입이 Y로 변환되는 것이 가능하기만 하면 operator!= 함수의 호출은 유효 호출로 간주될 것입니다. 

(참, 여담입니다 위의 이야기는 operator&& 함수가 오버로드될 수 있다는 가능성을 염두에 두지 않고 한 것이기 때문에, 위의 표현식에 나온 '&&'가 
논리곱 연산의 의미가 아니라면 이야기가 완전 히 딜라질 것입니다.)

사람들은 암시적 인터페이스를 이런 방법으로 생각하자마자 머리에 쥐가 나는 경우가 대부 분이지만, 사실 아스피린을 먹어야 할 정도는 정말 아닙니다. 
암시적 인터페이스는 그저 유효 표현식의 집합으로 구성되어 있을 뿐입니다. 표현식 자체만 뚫어지게 보면 좀 복잡해 보일 수도 있지만, 표현식에 걸리
는 제약은 일반적으로 지극히 평이합니다 예를 들어, 다음 조건식에서

if(w.size() > 10 && w != someNastyWidget) ...

size, operator >, operator&& 혹은 operator! = 함수에 대한 제약을 일일이 집어내 보라고 하면 열 분 중 아홉 분은 난감해 하겠지만, 이 표현
식에 대한 제약은 되레 집어 내기가 쉽습니다. if 문의 조건식 부분은 불(boolean) 표현식이어야 하기 때문에, 표현식에서 쓰이는 것들이 정확히 어떤 
타입인지 상관없이, 그리고 "w.size() > 10 && w != someNastyWidget"이 정확히 어떤 값을 내놓든 간에, 이 조건식 부분의 결과 값은 bool과 호
환되어야 합니다. 이 제약이 바로 doprocessing 템플릿이 타입 매개변수인 T에 대해 요구하는 암시적 인터페이스의 일부입니다. 그럼, 그 나머지도 궁
금하죠? 마찬가지 입니다. 복사 생성자, normalize 그리고 swap 함수에 대한 호출이 T 타입의 객체에 대해 '유효'해야 한다는 것입니다. 

템플릿 매개변수에 요구되는 암시적 인터페이스는 클래스의 객체에 요구되는 명시적 인터페이스만큼이나 우리 피부에 가깝게 닿아 있습니다. 게다가 컴파일 
도중에 점검된다는 점도 둘이 똑같습니다. 클래스에서 제공하는 명시적 인터페이스와 호환되지 않는 방법으로 그 클래스의 객체를 쓸 수 없듯이, 어떤 템플
릿 안에서 어떤 객체를 쓰려고 할 때 그 템플릿에서 요구하는 암시적 인터페이스를 그 객체가 지원하지 않으면 사용이 불가능합니다(한 번 더 말 씀드리는데,
코드가 컴파일되지 않습니다).

이것만은 잊지 말자!
* 클래스 및 템플릿은 모두 인터페이스와 다형성을 지원합니다.
* 클래스의 경우, 인터페이스는 명시적이며 함수의 시그니처를 중심으로 구성되어 있습니다. 다형성은 프로그램 실행 중에 가상 함수를 통해 나타납니다.
* 템플릿 매개변수의 경우, 인터페이스는 암시적이며 유효 표현식에 기반을 두어 구성됩니다. 다형성은 컴파일 중에 템플릿 인스턴스화와 함수 오버로딩 모
호성 해결을 통해 나타납니다.