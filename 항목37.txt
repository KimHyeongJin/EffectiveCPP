항목 37: 어떤 함수에 대해서도 상속받은 기본 매개변수 값은 절대로 재정의하지 말자.
(비가상 함수는 재정의해서는 안 되는 함수이므로 제외하고, 기본 매개변수 값을 가진 
가상 함수를 상속하는 경우)

우선, 이야깃거리를 간단하게 만들고 시작해야 할 것 같습니다. C++에서 상속받을 수 있는
함수의 종류는 아무리 발버둥쳐도 두 가지, 그러니까 가상 함수와 비가상 함수뿐입니다. 그
런데 이들 중 비가상 함수는 재정의해서는 안 되는 함수이므로(바로 앞의 항목 36에 나와 
있습니다), 지금부터 드릴 야기는 '기본 매개변수 값을 가진 가상 함수를 상속하는경우'로 
좁히더라도 별 문제가 없을 듯합니다.

이렇게 해 놓고 보니, 이번 항목을 뒷받침하는 이유가 깔끔하게 단도직입적으로 나와 주어
필자의 기분이 매우 훈훈합니다. 이유인즉 이렇습니다. 가상 함수는 동적으로 바인딩되지만,
기본 매개변수 값은 정적으로 바인딩된다는 것입니다.

무슨 소리냐고요? 정적으로 묶이든 동적으로 묶이든 간에 이미 만사 귀찮아져 버린 여러분
의 마음은 흐느적흐느적 풀려 버렸다는 말씀이신가요? [공식적으로, 정적 바인딩은 선행 바인딩
(early binding)이란 다른 이름으로도 알려져 있고, 동적 바인딩은 지연 바인딩(late binding)
이란 이름으로도 알려져 있단 말입니다.] 그렇다면, 이제부터 다시 알보면 되죠 뭐.

객체의 정적 타입(stati type)은 프로그램 소스 안에 여러분이 놓는 선언문을 통해 그 객체
가 갖는 타입입니다. 아래의 클래스 계통을 보도록 합시다.

// 기하학 도형을 나타내는 클래스
class Shape
{
public:
	enum ShapeColor { Red, Green, Blue };

	// 모든 도형은 자기 자신을 그리는 함수를 제공해야 합니다.
	virtual void draw(ShapeColor color = Red) const = 0;
	...
};

class Rectangle:public Shape
{
public:
	// 기본 매개변수 값이 달라진 부분을 놓치지 마세요. 큰일 났습니다!
	vitual void draw(ShapeColor color = Green) const;
	...
};

class Circle: public Shape
{
public:
	virtual void draw(ShapeColor color) const;
	...
};

위의 클래스 계통을 그림으로 나타내면 다음과 같습니다.

		Shape			
		/	\
Rectangle	Circle

이들을 써서 포인터를 나타내면 어떻게 되나 볼까요?

Shape *ps;	// 정적 타입 Shape*
Shape *pc = new Circle;	// 정적 타입 Shape*
Shape *pr = new Rectangle;	// 정적 타입 Shape*

여기서 ps, pc 및 pr은 모두 'Shape에 대한 포인터'로 선언되어 있기 때문에, 각각의 정
적 타입도 모두 이 타입입니다. 단, 그렇다고 해서 이들이 진짜로 가리키는 대상이 달라지는
것은 하나도 없습니다. 그냥 정적 타입이 Shape*일 뿐입니다.

객체의 동적 타입(dynamic type)은 현재 그 객체가 진짜로 무엇이냐에 따라 결정되는 타입
입니다. 다시 말해, '이 객체가 어떻게 동작할 것이냐'를 가리키는 타입이 동적 타입이라 하
겠습니다. 위의 예제를 가지고 말씀드리면, pc의 동적 타입은 Circle* 이고, pr의 동적
타입은 Rectangle*입니다. ps의 경우엔 동적 타입이 없습니다. (아직) 아무 객체도 참조
하고 있지 않으니까요.

동적 타입은 이름에서 풍기는 느낌 그대로 프로그램이 실행되는 도중에 바뀔 수 있습니다.
대개 대입문을 통해 바뀌죠. 다음의 예제를 봐 주세요.

ps = pc; // ps의 동적 타입은 이제 Circle*가 됩니다.
ps = pr; // ps의 동적 타입은 이제 Rectangle*이 됩니다.

가상 함수는 동적으로 바인딩됩니다. (가상 함수의) 호출이 일어난 객체의 동적 타입에 따라
어떤 (가상) 함수가 호출될지가 결정된다는 뜻입니다.

pc->draw(Shape::Red); // Circle::draw(Shape::Red)를 호출합니다.
pr->draw(Shape::Red); // Rectangle::draw(Shape::Red)를 호출합니다.

여기까지는 예전에 혹시 보셨던 다른 C++ 책에서도 나온 내용일 것입니다.
가상 함수 정도는 다 알고 계실 테지요. 그런데 '기본 매개변수 값이 설정된' 가상 함수로
오게 되면 뭔가 꼬이기 시작합니다. 이유는 앞에서 말씀드렸듯이, 가상 함수는 동적으로 바
인딩되어 있지만 기본 매개변수는 정적으로 바인딩되어 있기 때문입니다. 그러니까, 파생 클
래스에 정의된 가상 함수를 호출하면서 기본 클래스에 정의된 기본 매개변수 값을 사용해
버릴 수 있다는 이야기입니다.

pr->draw(); // Rectangle::draw(Shape::Red)를 호출한단 말입니다!

이 경우 pr의 동적 타입이 Rectangle* 이므로, 호출되는 가상 함수는 Rectangle의 것
입니다. 여기까지는 여러분도 예상하셨겠지요. Rectangle::draw 함수에서는 기본 매개변수
값이 Green으로 되어 있습니다. 하지만 pr의 정적 타입은 Shape* 이기 때문에, 지금 호출
되는 가상 함수에 쓰이는 기본 매개변수 값을 Shape 클래스에서 가져온답니다. Rectangle
클래스여야 할 것 같은데 말입니다! 그 결과, Shape 및 Rectangle 클래스 양쪽에서 선
언된 것이 한데 섞이는, 참으로 이상하고 거의 누구도 예상할 수 없으리만치 기상천외한 함
수 호출이 이루어지는 것입니다.

뭐? pr의 정적 타입은 Shape* 이기 때문에, 지금 호출되는 가상 함수에 쓰이는 기본 매개변
수 값은 Shape::Red를 사용한다????? 다음 코드를 다시 확인 하자!!!!!
pr->draw(); // Rectangle::draw(Shape::Red)를 호출한단 말입니다!

ps, pc, pr이 포인터이기 때문에 그런 거라고 할 만한 변명거리도 없습니다. 포인터가 아니
라 참조자라도 문제는 여전히 문제입니다. 중요한 점은 draw 함수가 가상 함수이고, 기본
매개변수 값들 중 하나가 파생 클래스에서 재정의되면 여지없이 문제가 생긴다는 것입니다.

어째서 C++는 이토록 삐딱한 통작방식을 고집히는 걸까요? 여기에는 런타임 효율이라는 요
소가 깊이 숨어 있습니다. 만약에 함수의 기본 매개변수가 동적으로 바인딩된다면, 프로그램
실행 중에 가상 함수의 기본 매개변수 값을 결정할 방법을 컴파일러 쪽에서 마련해 주어야
할 것입니다. 아무래도 이 방법은 컴파일 과정에서 결정하는 현재의 메커니즘보다는 느리고
복잡할 것이 분명하겠지요. 지금의 메커니즘은 속도 유지와 구현 간편성에 무게를 더 두어
결정 내린 결과이고, 그 덕택에 여러분은 효율 좋은 실행 동작을 누릴 수 있게 된 것입니다.
그러나 이번 항목의 이야기를 모르거나 살짝 잊고 계시는 분이라면 이런 동작은 진짜 어이
없고 햇갈리겠지요.

어쨌든 피가 되고 살이 되는 다 좋은 이야기였지만, 지금 말씀드린 이야기를 잘 따라서 기
본 클래스 및 파생 클래스의 사용자에게 기본 매개변수 값을 (똑같이) 제공해 보려고 하면
어떻게 되는지도 두 눈으로 확인하셔야 겠지요?

class Shape
{
public:
	enum ShapeColor { Red, Green, Blue };
	virtual void draw(ShapeColor color = Red) const = 0;
	...
};

class Rectangle: public Shape
{
pubic:
	virtual void draw(ShapeColor color = Red) const;
};

에그머니, 언제 보아도 반갑지 않은 코드 중복입니다. 더 안 좋은 것은 코드 중복에 의존성
까지 걸려 있다는 점입니다. Shape 클래스에서 기본 매개변수 값이 변하기라도 해 보세요.
이 값을 반복하고 있는 파생 클래스는 모두 그 값을 바꿔야 할 것입니다. 그렇게 하지 않으
면 상속받은 기본 매개변수 값을 재정의하는 꼴이 되고 마니까요. 그럼 대체 어쩌란 말일
까요?

여러분이 원하는 대로 가상 함수가 동작하도록 만드는 일이 힘들다고 느껴지면 다른 설계
방법으로 눈을 돌리는 편이 현명한 법입니다. 항목 35를 보시면 가상 함수 대신에 쓸 수 
있는 방법들 몇 개가 소개되어 있기도 하죠. 이들 중 하나를 잘 쓰면 될 것 같은데요. 바로
비가상 인터페이스(non-virtual interface) 관용구(NVI 관용구)를 쓰는 것입니다. 
이 방법은 파생 클래스에서 재정의할 수 있는 가상 함수를 private 멤버로 두고, 이 
가상 함수를 호출하는 public 비가상 함수를 기본 클래스에 만들어 두는 것입니다. 여기서 
이 방법을 응용 한다면, 비가상 함수가 기본 매개변수를 지정하도록 할 수 있겠지요. 이 
비가상 함수의 내부에서는 진짜 일을 맡은 가상 함수를 호출하게 만들고요.

class Shape
{
public:
	enum ShapeColor { Red, Green, Blue };
	void draw(ShapeColor color = Red) const	// 이제 비가상 함수입니다.
	{
		doDraw(color);	// 가상 함수를 호출합니다.
	}
	...
private:
	// 진짜 작업은 이 함수에서 이루어진다.
	virtual void doDraw(ShapeColor color) const = 0;
};

class Rectangle: public Shape
{
public:
	// 잘보세요! 기본 매개변수 값이 없습니다.
	virtual void doDraw(ShapeColor color) const;
};

비가상 함수는 파생 클래스에서 오버라이드되면 안 되기 때문에(항목 36 참조), 위와 같이
설계하면 draw 함수의 color 매개변수에 대한 기본값을 깔끔하게 Red로 고정시 킬 수 있
습니다.

이것만은 잊지 말자!
*	상속받은 기본 매개변수 값은 절대로 재정의해서는 안됩니다. 왜냐하면 기본 매개변수
	값은 정적으로 바인딩되는 반면, 가상 함수(여러분이 오버라이드 할수 있는 유일한 함수)
	는 동적으로 바인딩되기 때문입니다.