항목 12: 객체의 모든 부분을 빠짐없이 복사하자

객체의 안쪽 부분을 캡슐화한 객체 지향 시스템 중 설계가 잘 된 것들을 보면, 객체를 복사
하는 함수가 딱 둘만 있는 것을 알 수 있습니다. 복사 생성자와 복사 대입 연산자라고, 성격
에 따라 이름름도 적절히 지어져 있지요. 이 둘을 통틀어 객체 복사 함수(copying funct-
ion)라고 부르고요. 항목 5를 보신 분은 아시죠? 객체 복사 함수는 컴파일러가 필요에 따라 
만들기도 합니다. 그리고 컴파일러가 생성한 복사 함수는 비록 저절로 만들어졌지만 동작은
기본적인 요구에 아주 충실합니다. 복사되는 객체가 갖고 있는 데이터를 빠짐없이 복사한다,
바로 이겁니다.

객체 복사 함수를 여러분이 선언한다는 것은, 컴파일러가 만든 녀석의 기본 동작에 뭔가 마
음에 안 드는 것이 있다는 이야기입니다. 이에 대해 컴파일러도 썩 반기는 분위기는 아니라
는 듯, 꽤나 까칠한 자세로 여러분을 골탕 먹이려고 합니다. 어떻게 하는고 하니, 여러분이
구현한 복사 함수가 거의 확실히 틀렸을 경우에도 입을 다물어 버립니다.

고객(customer)을 타내는 클래스가 하나 있다고 가정합시다. 이 클래스의 복사 함수는 개
발자가 직접 구현했고, 복사 함수(들)를 할 호출할 때마다 로그를 남기도록 작성되었습니다.

void logCall(const std::string& funcName);	// 로그 기록내용을 만듭니다.

class Customer
{
public:
	...
	Customer(const Customer& rhs);
	Customer& operator=(const Customer& rhs);
	...
private:
	std::string name;
};

Customer::Customer(const Customer& rhs):name(rhs)	// rhs의 데이터를 복사
{
	logCall("Customer copy constructor");
}

Customer::Customer& operator=(const Customer& rhs)
{
	logCall("Customer copy assignment operator");
	name = rhs.name;	// rhs의 데이터를 복사
	return *this;		// 항목 10을 참고하세요.
}

문제될 것이 하나도 없어 보입니다. 실제로 그렇고요. 그런데 데이터 멤버 하나를 Customer
에 추가하면서 행복에 금이 가기 시작합니다.

clas Date{...};		// 날짜 정보를 위한 클래스

class Customer
{
public:
	...
private:
	std::string name;
	Date lastTransaction;
};

이렇게 되고 나면, 복사 함수의 동작은 완전 복사가 아니라 부분 복사(partial copy)가 됩니
다. 고객의 name은 복사하지만, lastTransaction은 복사하지 않습니다. 여기서 주의해
야 할 점이 나오는데, 이런 상황에 대해 경고를 해 주는 컴파일러가 거의 없습니다.
컴파일러 경고 수준을 최대로 높여도 마찬가지라니까요(항목 53 참조). 여러분 멋대로 복사
함수를 작성하는 데 대한 컴파일러의 피맺힌 복수라고 보시면 되겠습니다. 컴파일러가 복
사 함수를 정성스레 마련해 주겠다는데 여러분이 거절했으니, 여러분 구현이 죽이 되든 밥
이 되든 입도 뻥끗 안 하는 것입니다. 결국 우리가 할 일은 한 가지입니다. 클래스에 데이터
멤버를 추가했으면, 추가한 데이터 멤버를 처리하도록 복사 함수를 다시 작성할 수밖에 없
는 거죠. 그뿐 아니라 생성자도 전부 갱신해야 할 것이고(항목 4 및 항목 45 참조) 비표준형
perator= 함수도 전부 바꿔 줘야 합니다(항목 10에 예제가 나와 있습니다). 여러분이 깜빡했다
고 해서 컴파일러가 알려 줄 것 같죠? 기대를 버리시죠.

이 문제가 가장 사악하게 프로그래머를 괴롭히는 경우가 하나 있는데, 바로 클래스 상속입
니다. 아래의 코드를 봐 주세요.

class PriorityCustomer:public Customer	// 파생 클래스
{
public:
	...
	PriorityCustomer(const PriorityCustomer& rhs);
	PriorityCustomer& operator=(const PriorityCustomer& rhs);
	...
private:
	int priority;
};

PriorityCustomer::PriorityCustomer(const PriorityCustomer& rhs)
:priority(rhs.priority)
{
	logCall("PriorityCustomer copy constructor");
}

PriorityCustomer::PriorityCustomer& operator=(const PriorityCustomer& rhs)
{
	logCall("PriorityCustomer copy assignment operator");
	priority = rhs.priority;
	return *this;
}

PriorityCustomer 클래스의 복사 함수는 언뜻 보기엔 PriorityCustomer의 모든
것을 복사하고 있는 것처럼 보이지만, 눈을 부릅뜨고 다시 보세요. 네, 뭔가 이상합니다.
PriorityCustomer에 선언된 데이터 멤버를 모두 복사하고 있는 것은 사실이지만,
Customer로부터 상속한 데이터 멤버들의 사본도 엄연히 PriorityCustomer클래스에
들어 있는데, 이들은 복사가 안 되고 있습니다. PriorityCustomer의 복사 생성자에는
기본 클래스 생성자에 넘길 인자들도 명시되어 있지 않아서(멤버 초기화 리스트에 Customer
클래스에 대한 언급이 전혀 없죠), PriorityCustomer 객체의 Customer 부분은 인자
없이 실행되는 Customer 생성자, 즉 기본 생성자에 의해 초기화됩니다(이때 기본 생성자가
있다고 가정합시다. 없으면 코드 컴파일도 안 돼요). 이 생성자는 당연히 name 및 last-
Transaction에 대해 '기본적인' 초기화를 해 줄 거란 말이지요.

PriorityCustomer의 복사 대입 연산자의 경우에는 사정이 다소 다릅니다. 복사 대입
연산자는 기본 클래스의 데이터 멤버를 건드릴 시도도 하지 않기 때문에, 기본 클래스의 데
이터 멤버는 변경되지 않고 그대로 있게 됩니다.

사정이 어쨌든, 파생 클래스에 대한 복사 함수를 여러분 스스로 만든다고 결심했다면 기본
클래스 부분을 복사에서 빠뜨리지 않도록 각별히 주의하셔야 하겠습니다. 물론 기본 클래스
부분은 private 멤버일 가능성이 아주 높기 때문에(항목 22 참조), 이들을 직접 건드리긴
어렵습니다. 그 대신, 파생 클래스의 복사 함수 안에서 기본 클래스의 (대응되는) 복사 함수
를 호출하도록 만들면 됩니다.

PriorityCustomer::PriorityCustomer(const PriorityCustomer& rhs)
:Customer(rhs),		// 기본 클래스의 복사 생성자를 호출합니다.
priority(rhs.priority)
{
	logCall("PriorityCustomer copy constructor");
}

PriorityCustomer::PriorityCustomer& operator=(const PriorityCustomer& rhs)
{
	logCall("PriorityCustomer copy assignment operator");
	Customer::operator=(rhs);	// 기본 클래스 부분을 대입합니다.
	priority = rhs.priority;
	return *this;
}

이번 항목의 제목으로 나온 "모든 부분을 복사하자"라는 말의 말귀를 이제 알 수 있을 것
같죠? 객체의 복사 함수를 작성할 때는 다음의 두 가지를 꼭 확인하라는 것입니다. (1) 해당
클래스의 데이터 멤버를 모두 복사하고 (2) 이 클래스가 상속한 기본 클래스의 복사 함수도
꼬박꼬박 호출해 주도록 합시다.

사실, 클래스의 양대 복사 함수(복사 생성자와 복사 대입 연산자)는 본문이 비슷하게 나오는
경우가 자주 있어서, 한쪽에서 다른 쪽을 호출하게 만들어서 코드 판박이를 피하면 좋겠다
는 유혹 때문에 손가락이 간질거리는 분도 계실 겁니다. 코드 중복을 피하려는 기특한 마음
이야 뭐라 할 건 아니지만, 한쪽에서 다른 쪽을 호출히는 식으로 두 개의 복사 함수를 만들
면 그걸로 OK일 것 같죠? 천만에요 KO 당합니다.

복사 대입 연산자에서 복사 생성자를 호출하는 것부터 말이 안 되는 발상입니다. 이미 만들
어져 존재하는 객체를 다시 '생성'하려는 시도니까요. 태어난 아이에게 엄마 뱃속으로 들어
가라고 말하는 꼴 아니겠습니까? 게다가 이렇게 할 수 있는 문법도 없습니다. 이런 방법이
가능해 '보이는' 문법을 본 것 같다고요? 설마요. 암울했던 지난날의 방법으로 어떻게든 하기
는 하는 문법이 있다는 사실은 물론 알고 있습니다만, 그런 문법을 사용하면 특정한 조건에
서 객체의 데이터가 훼손되어 버릴 수 있어서 매우 위험합니다. 여러분만은 이런 문법을 몰
랐으면 하는 생각에, 필자 역시도 보여주지 않겠습니다. 그냥 편하게 마음 정리하고 받아들
이세요. 복사 대입 연산자에서 복사 생성자를 호출하게 만들기란 애초부터 원하지 않은 거
였다고 말이죠.

복사 생성자에서 복사 대입 연산자를 호출하는 것은 어떨까요? 마찬가지로 넌센스입니다. 
생성자의 역할은 새로 만들어진 객체를 초기화하는 것이지만 대입 연산자의 역할은 '이미' 초
기화가 끝난 객체에게 값을 주는 것입니다. 초기화된 객체에만 적용된다는 이야기죠. 그런데
생성 중인 객체에다가 대입이라니, 초기화된 객체에 대해서만 의미를 갖는 동작을 '아직 초
기화도 안 된' 객체에 대해 한다는 것입니다. 헷갈리죠? 말이 안 된다는 뜻입니다! 
하지 마세요.

대신에 이런 방법은 생각해 볼 수 있습니다. 어쩌다 보니 복사 생성자와 복사 대입 연산자
의 코드 본문이 슷하게 니온다는 느낌 이 들면, 양쪽에서 겹치는 부분을 별도의 멤버 함수
에 분리해 놓은 후에 이 함수를 호출하게 만드는 것입니다. 대개 이런 용도의 함수는
private 멤버로 두는 경우가 많고, 이름이 init 어쩌고 하는 이름을 가집니다. 안전할
뿐만 아니라 검증된 방볍이므로, 복사 생성자와 복사 대입 연산자에 나타나는 코드 중복을
제거히는 방법으로 사용해 보시기 바랍니다.

이것만은 잊지 말자!
*	객체 복사 힘수는 주어진 객체의 모든 데이터 멤버 및 모든 기본 클래스 부분을 빠뜨리지
	말고 복사해야 합니다.
*	클래스의 복사 함수 두 개를 구현할 때, 한쪽을 이용해서 다른 쪽을 구현하려는 시도는
	절대로 하지 마세요. 그 대신 공통된 동작을 제3의 함수에다 분리해 놓고 양쪽에서 이것을
	호출하게 만들어서 해결합시다.